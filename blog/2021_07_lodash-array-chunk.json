{"title":"lodash数组中chunk、compact方法","description":"lodash中chunk、compac方法的使用，在业务中用到多少呢，怎么对数组使用chunk进行切割","keywords":"lodash,chunk,compact,array,数组,切割,源码分析,每天一个lodash函数","labels":["lodash"],"date":"2021-07-15","path":"2021/07/lodash-array-chunk.md","slug":"2021_07_lodash-array-chunk","html":"<h2 id=\"chunk\">Chunk</h2>\n<p>lodash的chunk方法用于对数组进行按size切割。如果最后数组不满足size的长度，则剩余的部分会放到最后一个数组上。</p>\n<h3 id=\"使用\">使用</h3>\n<pre><code class=\"language-javascript\">const arr = <span class=\"hljs-comment\">[1, 2, 3, 4, 5]</span>\n_.chunk(arr, 2) // <span class=\"hljs-comment\">[<span class=\"hljs-comment\">[1, 2]</span>, <span class=\"hljs-comment\">[3, 4]</span>, <span class=\"hljs-comment\">[5]</span>]</span> \n</code></pre>\n<p>结果返回的是一个二维数组。开发了这么久，想了下这个函数所实现的功能需求貌似少之又少。</p>\n<h3 id=\"源码\">源码</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\">function <span class=\"hljs-title\">chunk</span><span class=\"hljs-params\">(array, size = <span class=\"hljs-number\">1</span>)</span> </span>{ <span class=\"hljs-comment\">// 存在参数默认</span>\n  size = Math.<span class=\"hljs-built_in\">max</span>(<span class=\"hljs-built_in\">toInteger</span>(size), <span class=\"hljs-number\">0</span>)     <span class=\"hljs-comment\">// 【验证输入参数的合法性】toInteger会把传入的size转为整数</span>\n  <span class=\"hljs-keyword\">const</span> length = array == null ? <span class=\"hljs-number\">0</span> : array.length   <span class=\"hljs-comment\">//  【验证输入参数的合法性】计算传入数组的长度</span>\n  <span class=\"hljs-keyword\">if</span> (!length || size &lt; <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">return</span> []\n  }\n  let index = <span class=\"hljs-number\">0</span>\n  let resIndex = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(Math.<span class=\"hljs-built_in\">ceil</span>(length / size)) <span class=\"hljs-comment\">//   这里新建一个包含切割结果个数的空数组，如[, , , ]</span>\n\n  <span class=\"hljs-keyword\">while</span> (index &lt; length) {\n    result[resIndex++] = <span class=\"hljs-built_in\">slice</span>(array, index, (index += size)) <span class=\"hljs-comment\">//    slice是封装的函数，可以切割回数组的第二个参数到第三个参数的值</span>\n  }\n  <span class=\"hljs-keyword\">return</span> result\n}\n</code></pre>\n<h2 id=\"compact\">compact</h2>\n<p>compact在字面上的意思是紧凑的，在lodash中，就是把一个数组中值为 <code>false</code>, <code>null</code>, <code>0</code>, <code>&quot;&quot;</code>, <code>undefined</code>, <code>NaN</code>的都剔除。</p>\n<h3 id=\"使用-1\">使用</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-attribute\">_</span>.compact([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, false, <span class=\"hljs-number\">2</span>, &#x27;&#x27;, <span class=\"hljs-number\">3</span>]) // =&gt;<span class=\"hljs-meta\"> [1, 2, 3]</span>\n</code></pre>\n<p>业务中使用的也比较少。</p>\n<h3 id=\"源码-1\">源码</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compact</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">array</span>)</span> </span>{\n  <span class=\"hljs-keyword\">let</span> resIndex = <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">//   貌似都喜欢把下标定位resIndex这个变量名。。</span>\n  <span class=\"hljs-keyword\">const</span> result = []\n\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">array</span> == <span class=\"hljs-keyword\">null</span>) {\n    <span class=\"hljs-keyword\">return</span> result\n  }\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> value of <span class=\"hljs-keyword\">array</span>) { <span class=\"hljs-comment\">//   这里用for of对数组进行遍历</span>\n    <span class=\"hljs-keyword\">if</span> (value) { <span class=\"hljs-comment\">//   核心的过滤就是这里，在if下，falsy的参数会被过滤掉。</span>\n      result[resIndex++] = value\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> result\n}\n</code></pre>\n<blockquote>\n<p>Lodash 源码理解 1</p>\n</blockquote>\n"}