{"title":"修改浏览器回退历史","description":"有个需求，需要修改短链跳转到落地页后，在落地页返回的历史记录。避免出现跳转到落地页后返回还是出现短链中转的问题。","keywords":"浏览器,回退历史，history api,pushState,replaceState","labels":["前端"],"date":"2019-04-12","path":"2019/04/history-api.md","slug":"2019_04_history-api","html":"<p><img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://user-images.githubusercontent.com/21136420/56006752-c05db900-5d08-11e9-94c3-61938d3f2eeb.png\" alt=\"无标题绘图\" ></p>\n<p>有个需求，需要修改短链跳转到落地页后，在落地页返回的历史记录。避免出现跳转到落地页后返回还是出现短链中转的问题。</p>\n<p>要求：</p>\n<ol>\n<li>无法控制落地页的所有代码。</li>\n<li>回退页面可在短链内进行定义。 </li>\n</ol>\n<h3 id=\"history-api\">History Api</h3>\n<p>history api提供浏览器修改历史记录功能。简单罗列下api的一些使用。</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-regexp\">//</span> 返回上一个历史记录\nwindow.history.back()\nwindow.history.go(-<span class=\"hljs-number\">1</span>)\n\n<span class=\"hljs-regexp\">//</span> 前进一个历史记录\nwindow.history.forward()\nwindow.history.go(<span class=\"hljs-number\">1</span>)\n\n<span class=\"hljs-regexp\">//</span> 添加或者替换历史记录条目，注意这【并不会刷新页面】。\nhistory.pushState(state, title, url);\n<span class=\"hljs-regexp\">//</span> state：网址相关的状态Object，在popstate事件触发时，会在回调函数中接收到这个对象。不需要的话可以设为null。\n<span class=\"hljs-regexp\">//</span> title：新页面的title属性，填null。\n<span class=\"hljs-regexp\">//</span> url：新的页面地址，必须必须和上一个页面处于同域，否则抛出异常。\n\n<span class=\"hljs-regexp\">//</span> 替换当前的历史记录，注意这【并不会刷新页面】。\nhistory.replaceState(state, title, url);\n<span class=\"hljs-regexp\">//</span> 参数同上。\n</code></pre>\n<h3 id=\"实现的思考\">实现的思考</h3>\n<ol>\n<li><p>第一次尝试。既然要实现在落地页返回的历史，可不可以在短链中转页上监听一下上一页面的url，当然在跳转到落地页之前可以在落地页的url上带上参数，可以在短链中转页上通过是否带这个参数进行判断。放弃，理由是麻烦而且不稳定，可能出现难以预料的问题。</p>\n</li>\n<li><p>第二次尝试。使用历史记录api修改历史记录。要修改的页面是短链中转页的历史记录，需要替换【当前】短链中转页的历史，使得跳转到落地页到上一个历史是短链所配置到页面。</p>\n</li>\n</ol>\n<p>需要注意到是，历史记录不能replace或者push不同域的url。所以需要通过一个queryString进行判断。所以做法是：</p>\n<pre><code class=\"language-javascript\">window.onload = <span class=\"hljs-keyword\">function</span><span class=\"hljs-literal\">()</span> {\n      <span class=\"hljs-keyword\">if</span> (get<span class=\"hljs-constructor\">Param(&#x27;<span class=\"hljs-params\">backUrl</span>&#x27;, <span class=\"hljs-params\">location</span>.<span class=\"hljs-params\">href</span>)</span>) {\n        console.log(&#x27;进入跳转到预定回退页&#x27;)\n        location.replace(get<span class=\"hljs-constructor\">Param(&#x27;<span class=\"hljs-params\">backUrl</span>&#x27;, <span class=\"hljs-params\">location</span>.<span class=\"hljs-params\">href</span>)</span>)\n      } <span class=\"hljs-keyword\">else</span> {\n        console.log(&#x27;进入跳转到落地页并改写历史&#x27;)\n        history.replace<span class=\"hljs-constructor\">State(<span class=\"hljs-params\">null</span>, <span class=\"hljs-params\">null</span>,  <span class=\"hljs-string\">&quot;[域名、处理返回逻辑页面]?backUrl=https://www.baidu.com&quot;</span>)</span>\n        document.get<span class=\"hljs-constructor\">ElementById(&#x27;<span class=\"hljs-params\">jump</span>-<span class=\"hljs-params\">id</span>&#x27;)</span>.click<span class=\"hljs-literal\">()</span> <span class=\"hljs-comment\">// 跳转到落地页</span>\n      }\n    }\n<span class=\"hljs-comment\">// getParam是获取链接qs参数的函数。</span>\n</code></pre>\n"}