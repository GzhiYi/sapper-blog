{"title":"2020/06/valine-and-notifications.md","path":"2020/06/valine-and-notifications","slug":"2020_06_valine-and-notifications","html":"<p>通过一点时间的使用，发现gitalk可以解决静态博客评论问题，是挺方便的，但综合考虑下，存在以下两个缺点：</p>\n<ol>\n<li>需要github账号登录。</li>\n<li>访问非常慢。</li>\n</ol>\n<p>有意间，发现一个评论插件很适合静态博客植入：<a target='_blank'  href=\"https://valine.js.org/\">Valine</a>。</p>\n<p>新样式</p>\n<p><img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://i.loli.net/2020/06/29/RiSBpcyAQD1kXCN.jpg\" alt=\"style\" ></p>\n<p>新评论模块默认很清新，和我当前的样式较为符合，只做了一点点的样式覆盖。</p>\n<pre><code class=\"language-css\"><span class=\"hljs-comment\">/* valine 样式覆盖 */</span>\n<span class=\"hljs-selector-class\">.v</span><span class=\"hljs-selector-attr\">[data-class=v]</span> <span class=\"hljs-selector-class\">.vwrap</span> {\n    <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">62</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.1</span>) <span class=\"hljs-meta\">!important</span>;\n}\n<span class=\"hljs-selector-class\">.v</span><span class=\"hljs-selector-attr\">[data-class=v]</span> <span class=\"hljs-selector-class\">.vwrap</span> <span class=\"hljs-selector-class\">.vheader</span> <span class=\"hljs-selector-class\">.vinput</span> {\n    <span class=\"hljs-attribute\">border-bottom</span>: none <span class=\"hljs-meta\">!important</span>;\n}\n<span class=\"hljs-selector-class\">.v</span><span class=\"hljs-selector-attr\">[data-class=v]</span> <span class=\"hljs-selector-class\">.txt-right</span> {\n    <span class=\"hljs-attribute\">display</span>: none <span class=\"hljs-meta\">!important</span>;\n}</code></pre>\n<h2 id=\"推送\">推送</h2>\n<p>在valine的文档中，有提到可以用一个扩展的valine-admin以实现评论通知功能。我在leancloud尝试了发现比较麻烦。外加之前使用GitHub Actions用到了一个推送服务实现了在action成功之后推送部署成功的通知到手机上。那是不是可以通过下面的思路去实现评论推送呢？</p>\n<blockquote>\n<p><a target='_blank'  href=\"https://push.techulus.com/\">PUSH注册</a>注册后使用免费的plan，可以每月100条推送限额。要推送到手机，只需要调用提供的接口还有下载一个手机APP就好了。</p>\n</blockquote>\n<p>要知道，做到推送到手机，只需要POST下面的接口：</p>\n<pre><code class=\"language-bash\">https://push.techulus.com/api/v1/notify/{YOU API KEY}?title=Push by Techulus&amp;body=This is your first push notification</code></pre>\n<ol>\n<li>在评论接口POST请求之后，在lean端通过类似拦截/触发的方法调用推送接口。</li>\n<li>在网页端拦截POST请求，在评论发出之后，在调用推送接口。</li>\n</ol>\n<p>在查看对应文档之后，第一种方式我找不到可行的入口。我想确定数据库入库的逻辑在哪处理的也找不到，所以采用第二种方法。</p>\n<h2 id=\"拦截评论请求\">拦截评论请求</h2>\n<ol>\n<li>博客引入ajax-hook全局拦截请求</li>\n</ol>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://unpkg.com/ajax-hook@2.0.3/dist/ajaxhook.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<ol start=\"2\">\n<li><p>在ajax-hook实例上，处理onRequest钩子。</p>\n<pre><code class=\"language-javascript\">ah.proxy({\n         <span class=\"hljs-comment\">//请求发起前进入</span>\n         <span class=\"hljs-attr\">onRequest</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">config, handler</span>) =&gt;</span> {\n             <span class=\"hljs-keyword\">if</span> (config.url.includes(<span class=\"hljs-string\">'classes/Comment'</span>) &amp;&amp; config.method === <span class=\"hljs-string\">'POST'</span>) {\n                 <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'请求发起前'</span>, config.body)\n                 fetch(\n                     <span class=\"hljs-string\">`https://push.techulus.com/api/v1/notify/<span class=\"hljs-subst\">${YOU API KEY}</span>?title=<span class=\"hljs-subst\">${location.pathname || <span class=\"hljs-string\">'文章'</span>}</span>有新回复&amp;body=<span class=\"hljs-subst\">${config.body.substr(<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">30</span>)}</span>`</span>,\n                     {\n                         <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,\n                         <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>,\n                         <span class=\"hljs-attr\">headers</span>: <span class=\"hljs-keyword\">new</span> Headers({\n                             <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json'</span>\n                         })\n                     }\n                 )\n             }\n             handler.next(config);\n         },\n         <span class=\"hljs-comment\">//请求发生错误时进入，比如超时；注意，不包括http状态码错误，如404仍然会认为请求成功</span>\n         <span class=\"hljs-attr\">onError</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">err, handler</span>) =&gt;</span> {\n                 handler.next(err)\n         },\n         <span class=\"hljs-comment\">//请求成功后进入</span>\n         <span class=\"hljs-attr\">onResponse</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">response, handler</span>) =&gt;</span> {\n                 handler.next(response)\n         }\n     })</code></pre>\n<p>更多关于ajax-hook的文档，参阅：<a target='_blank'  href=\"https://github.com/wendux/Ajax-hook\">ajax-hook</a>    </p>\n</li>\n</ol>\n<h2 id=\"缺点提示\">缺点提示</h2>\n<p>第一种方式可以很好的保护推送的API KEY，因为有限额，暴露后可以随意调用。第二种比较简单易行。不过，反正push服务免费的话，也不会有损失。如果push服务付费就不要用第二种方法了。</p>\n<p>完成以上操作就可以收到评论推送啦，还是很方便的。如果有更好的免费push服务提供的，可以评论留言，我会很快看到的。</p>\n","fmData":{"attributes":{"title":"博客评论更改为valine并增加评论推送","description":"评论模块由gitalk转为valine，通过techulus的push进行评论推送","keywords":"sapper,blog,techulus push,valine,comments","labels":["前端"],"date":"2020-06-29T00:00:00.000Z"},"body":"通过一点时间的使用，发现gitalk可以解决静态博客评论问题，是挺方便的，但综合考虑下，存在以下两个缺点：\n\n1. 需要github账号登录。\n2. 访问非常慢。\n\n有意间，发现一个评论插件很适合静态博客植入：[Valine](https://valine.js.org/)。\n\n新样式\n\n![style](https://i.loli.net/2020/06/29/RiSBpcyAQD1kXCN.jpg)\n\n新评论模块默认很清新，和我当前的样式较为符合，只做了一点点的样式覆盖。\n\n```css\n/* valine 样式覆盖 */\n.v[data-class=v] .vwrap {\n\tborder: 1px solid rgba(255, 62, 0, 0.1) !important;\n}\n.v[data-class=v] .vwrap .vheader .vinput {\n\tborder-bottom: none !important;\n}\n.v[data-class=v] .txt-right {\n\tdisplay: none !important;\n}\n```\n\n## 推送\n\n在valine的文档中，有提到可以用一个扩展的valine-admin以实现评论通知功能。我在leancloud尝试了发现比较麻烦。外加之前使用GitHub Actions用到了一个推送服务实现了在action成功之后推送部署成功的通知到手机上。那是不是可以通过下面的思路去实现评论推送呢？\n\n> [PUSH注册](https://push.techulus.com/)注册后使用免费的plan，可以每月100条推送限额。要推送到手机，只需要调用提供的接口还有下载一个手机APP就好了。\n\n要知道，做到推送到手机，只需要POST下面的接口：\n\n```bash\nhttps://push.techulus.com/api/v1/notify/{YOU API KEY}?title=Push by Techulus&body=This is your first push notification\n```\n\n\n\n1. 在评论接口POST请求之后，在lean端通过类似拦截/触发的方法调用推送接口。\n2. 在网页端拦截POST请求，在评论发出之后，在调用推送接口。\n\n在查看对应文档之后，第一种方式我找不到可行的入口。我想确定数据库入库的逻辑在哪处理的也找不到，所以采用第二种方法。\n\n## 拦截评论请求\n\n1. 博客引入ajax-hook全局拦截请求\n\n```html\n<script src=\"https://unpkg.com/ajax-hook@2.0.3/dist/ajaxhook.min.js\"></script>\n```\n\n2. 在ajax-hook实例上，处理onRequest钩子。\n\n   ```javascript\n   ah.proxy({\n\t\t\t//请求发起前进入\n\t\t\tonRequest: (config, handler) => {\n\t\t\t\tif (config.url.includes('classes/Comment') && config.method === 'POST') {\n\t\t\t\t\tconsole.log('请求发起前', config.body)\n\t\t\t\t\tfetch(\n\t\t\t\t\t\t`https://push.techulus.com/api/v1/notify/${YOU API KEY}?title=${location.pathname || '文章'}有新回复&body=${config.body.substr(12, 30)}`,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\tmode: 'cors',\n\t\t\t\t\t\t\theaders: new Headers({\n\t\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\thandler.next(config);\n\t\t\t},\n\t\t\t//请求发生错误时进入，比如超时；注意，不包括http状态码错误，如404仍然会认为请求成功\n\t\t\tonError: (err, handler) => {\n\t\t\t\t\thandler.next(err)\n\t\t\t},\n\t\t\t//请求成功后进入\n\t\t\tonResponse: (response, handler) => {\n\t\t\t\t\thandler.next(response)\n\t\t\t}\n\t\t})\n   ```\n\n   更多关于ajax-hook的文档，参阅：[ajax-hook](https://github.com/wendux/Ajax-hook)\t\n\n## 缺点提示\n\n第一种方式可以很好的保护推送的API KEY，因为有限额，暴露后可以随意调用。第二种比较简单易行。不过，反正push服务免费的话，也不会有损失。如果push服务付费就不要用第二种方法了。\n\n完成以上操作就可以收到评论推送啦，还是很方便的。如果有更好的免费push服务提供的，可以评论留言，我会很快看到的。","bodyBegin":9,"frontmatter":"title: 博客评论更改为valine并增加评论推送\ndescription: 评论模块由gitalk转为valine，通过techulus的push进行评论推送\nkeywords: sapper,blog,techulus push,valine,comments\nlabels: ['前端']\ndate: 2020-06-29"}}