{"title":"博客评论更改为valine并增加评论推送","description":"评论模块由gitalk转为valine，通过techulus的push进行评论推送","keywords":"sapper,blog,techulus push,valine,comments","labels":["前端"],"date":"2020-06-29","path":"2020/06/valine-and-notifications.md","slug":"2020_06_valine-and-notifications","html":"<p>通过一点时间的使用，发现gitalk可以解决静态博客评论问题，是挺方便的，但综合考虑下，存在以下两个缺点：</p>\n<ol>\n<li>需要github账号登录。</li>\n<li>访问非常慢。</li>\n</ol>\n<p>有意间，发现一个评论插件很适合静态博客植入：<a target='_blank'  href=\"https://valine.js.org/\">Valine</a>。</p>\n<p>新样式</p>\n<p><img align=\"center\" style=\"width: 100%;margin-bottom: 20px;border-radius: 8px;background: #f8fdf3;\" data-zoomable src=\"https://i.loli.net/2020/06/29/RiSBpcyAQD1kXCN.jpg\" alt=\"style\" ></p>\n<p>新评论模块默认很清新，和我当前的样式较为符合，只做了一点点的样式覆盖。</p>\n<pre><code class=\"language-css\"><span class=\"hljs-comment\">/* valine 样式覆盖 */</span>\n<span class=\"hljs-selector-class\">.v</span><span class=\"hljs-selector-attr\">[data-class=v]</span> <span class=\"hljs-selector-class\">.vwrap</span> {\n    <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">62</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.1</span>) <span class=\"hljs-meta\">!important</span>;\n}\n<span class=\"hljs-selector-class\">.v</span><span class=\"hljs-selector-attr\">[data-class=v]</span> <span class=\"hljs-selector-class\">.vwrap</span> <span class=\"hljs-selector-class\">.vheader</span> <span class=\"hljs-selector-class\">.vinput</span> {\n    <span class=\"hljs-attribute\">border-bottom</span>: none <span class=\"hljs-meta\">!important</span>;\n}\n<span class=\"hljs-selector-class\">.v</span><span class=\"hljs-selector-attr\">[data-class=v]</span> <span class=\"hljs-selector-class\">.txt-right</span> {\n    <span class=\"hljs-attribute\">display</span>: none <span class=\"hljs-meta\">!important</span>;\n}\n</code></pre>\n<h2 id=\"推送\">推送</h2>\n<p>在valine的文档中，有提到可以用一个扩展的valine-admin以实现评论通知功能。我在leancloud尝试了发现比较麻烦。外加之前使用GitHub Actions用到了一个推送服务实现了在action成功之后推送部署成功的通知到手机上。那是不是可以通过下面的思路去实现评论推送呢？</p>\n<blockquote>\n<p><a target='_blank'  href=\"https://push.techulus.com/\">PUSH注册</a>注册后使用免费的plan，可以每月100条推送限额。要推送到手机，只需要调用提供的接口还有下载一个手机APP就好了。</p>\n</blockquote>\n<p>要知道，做到推送到手机，只需要POST下面的接口：</p>\n<pre><code class=\"language-bash\">https:<span class=\"hljs-regexp\">//</span>push.techulus.com<span class=\"hljs-regexp\">/api/</span>v1<span class=\"hljs-regexp\">/notify/</span>{YOU API KEY}?title=Push by Techulus&amp;body=This is your first push notification\n</code></pre>\n<ol>\n<li>在评论接口POST请求之后，在lean端通过类似拦截/触发的方法调用推送接口。</li>\n<li>在网页端拦截POST请求，在评论发出之后，在调用推送接口。</li>\n</ol>\n<p>在查看对应文档之后，第一种方式我找不到可行的入口。我想确定数据库入库的逻辑在哪处理的也找不到，所以采用第二种方法。</p>\n<h2 id=\"拦截评论请求\">拦截评论请求</h2>\n<ol>\n<li>博客引入ajax-hook全局拦截请求</li>\n</ol>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://unpkg.com/ajax-hook@2.0.3/dist/ajaxhook.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<ol start=\"2\">\n<li><p>在ajax-hook实例上，处理onRequest钩子。</p>\n<pre><code class=\"language-javascript\">ah.proxy({\n         <span class=\"hljs-regexp\">//</span>请求发起前进入\n         onRequest: (config, handler) =&gt; {\n             <span class=\"hljs-keyword\">if</span> (config.url.includes(<span class=\"hljs-string\">&#x27;classes/Comment&#x27;</span>) &amp;&amp; config.method === <span class=\"hljs-string\">&#x27;POST&#x27;</span>) {\n                 console.log(<span class=\"hljs-string\">&#x27;请求发起前&#x27;</span>, config.body)\n                 fetch(\n                     `https:<span class=\"hljs-regexp\">//</span>push.techulus.com<span class=\"hljs-regexp\">/api/</span>v1<span class=\"hljs-regexp\">/notify/</span><span class=\"hljs-variable\">${YOU API KEY}</span>?title=<span class=\"hljs-variable\">${location.pathname || &#x27;文章&#x27;}</span>有新回复&amp;body=<span class=\"hljs-variable\">${config.body.substr(12, 30)}</span>`,\n                     {\n                         method: <span class=\"hljs-string\">&#x27;POST&#x27;</span>,\n                         mode: <span class=\"hljs-string\">&#x27;cors&#x27;</span>,\n                         headers: new Headers({\n                             <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>: <span class=\"hljs-string\">&#x27;application/json&#x27;</span>\n                         })\n                     }\n                 )\n             }\n             handler.<span class=\"hljs-keyword\">next</span>(config);\n         },\n         <span class=\"hljs-regexp\">//</span>请求发生错误时进入，比如超时；注意，不包括http状态码错误，如<span class=\"hljs-number\">404</span>仍然会认为请求成功\n         onError: (err, handler) =&gt; {\n                 handler.<span class=\"hljs-keyword\">next</span>(err)\n         },\n         <span class=\"hljs-regexp\">//</span>请求成功后进入\n         onResponse: (response, handler) =&gt; {\n                 handler.<span class=\"hljs-keyword\">next</span>(response)\n         }\n     })\n</code></pre>\n<p>更多关于ajax-hook的文档，参阅：<a target='_blank'  href=\"https://github.com/wendux/Ajax-hook\">ajax-hook</a>    </p>\n</li>\n</ol>\n<h2 id=\"缺点提示\">缺点提示</h2>\n<p>第一种方式可以很好的保护推送的API KEY，因为有限额，暴露后可以随意调用。第二种比较简单易行。不过，反正push服务免费的话，也不会有损失。如果push服务付费就不要用第二种方法了。</p>\n<p>完成以上操作就可以收到评论推送啦，还是很方便的。如果有更好的免费push服务提供的，可以评论留言，我会很快看到的。</p>\n"}