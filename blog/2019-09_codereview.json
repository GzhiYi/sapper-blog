{"title":"2019-09/codereview.md","path":"2019-09/codereview","slug":"2019-09_codereview","html":"<blockquote>\n<p>There are about 15-20 common mistakes made by programmers.\nA checklist is a useful means of ensuring that common mistakes are identified.</p>\n</blockquote>\n<p>公司能有CodeReview的实践是非常好的。它最终的作用是促进工程师日常代码交流和提升工程师的代码能力。</p>\n<h2 id=\"明确代码规范\">明确代码规范</h2>\n<p>无论前端还是后端，代码规范是很重要的。不应该把过多的CodeReview时间放在诸如代码空格、缩进等问题，这都是可以通过代码规范去约束的。各个开发人员都要尽力去写出符合公司代码规范的代码，减少CodeReview时间。</p>\n<h2 id=\"codereview-检查项\">CodeReview 检查项</h2>\n<p>有一个简单明确的检查项可以快速对代码进行检查，不用担心遗漏某些必要的项。以下的列表提供建议，可以按公司内要求进行优化添加等。</p>\n<h3 id=\"一般\">一般</h3>\n<ul>\n<li>代码是否符合预期的功能，逻辑是否正确。</li>\n<li>所写的代码是否容易理解。</li>\n<li>代码是否符合规定的编码规范。</li>\n<li>是否有冗余或者重复编写的代码。</li>\n<li>是否尽可能的模块化/组件化。</li>\n<li>全局变量是否全局定义（可以快速修改不必多处查找遗漏）。</li>\n<li>是否留下注释的代码（视情况保留，一般不要存在好些）。</li>\n<li>循环是否正确设置了结束条件。</li>\n<li>代码设置的变量命名是否符合语义，易于理解。</li>\n</ul>\n<h3 id=\"性能上\">性能上</h3>\n<ul>\n<li>是否还有更好的能提升既有性能的有效方法。</li>\n<li>是否有内置函数或者成熟的库/组件能替换已有代码。</li>\n<li>是否已移除掉日志和debug代码。</li>\n</ul>\n<h3 id=\"安全上\">安全上</h3>\n<ul>\n<li>输入类型的代码是否检查了类型、长度、提交格式等，后台是否对输入进行编码（encode）。（防xss）</li>\n<li>使用的第三方库有无错误异常捕获处理。</li>\n<li>容易出错的地方是否进行异常捕获处理。</li>\n<li>代码是否对变量做了空值判断处理。</li>\n</ul>\n<h3 id=\"解释说明上\">解释说明上</h3>\n<ul>\n<li>代码的作用是否有注释留下描述。</li>\n<li>所有函数都做了注释吗？</li>\n<li>有没对所有代码异常和边缘情况做好判断处理。</li>\n<li>引入的第三方库/组件是否做了必要的用途和引入说明。</li>\n<li>有没有不完整的代码？如果有，那代码可不可以删除或者标记TODO等？</li>\n</ul>\n<h3 id=\"reviewer--author\">Reviewer &amp;&amp; Author</h3>\n<p>这部分原文在：<a href=\"https://phauer.com/2018/code-review-guidelines/\">戳</a></p>\n<ul>\n<li><strong>用I-Messages</strong></li>\n</ul>\n<blockquote>\n<p>You are not your code.</p>\n</blockquote>\n<p>要知道 <code>You !== Your Code</code>。给代码review错误不是对人review错误，不要把人自身价值和人写的代码连接起来。每个人都是团队中有价值的一部分。<br>在Author和Reviewer之间应该交换业务最好的实践、经验、一些踩坑点还有一些提示。<br>Reviewer在代码反馈上，有一个小规则我觉得挺有意思的：用I-Messages代替I-Messages。</p>\n<p>错误: “<strong>你</strong>写的这段代码存在黑魔法。”</p>\n<p>正确: “这段代码<strong>我</strong>不是很理解哦。”</p>\n<ul>\n<li><strong>讨论对象是代码不是人呐</strong></li>\n</ul>\n<p>只讨论代码可以增加review反馈的可接受度。</p>\n<p>错误: “<strong>你</strong>写的这代码请求了多次接口，这会影响性能。”</p>\n<p>正确: “<strong>这段代码</strong>触发多次请求了，应该会影响性能。”</p>\n<ul>\n<li><strong>提问题</strong></li>\n</ul>\n<p>好的方式提问题，让人更好的接受。</p>\n<p>错误: “这变量就应该命名为UserId。”</p>\n<p>正确: “如果这变量命名为UserId是不是好理解多了？”</p>\n","fmData":{"attributes":{"title":"CodeReview","description":"公司能有CodeReview的实践是非常好的。它最终的作用是促进工程师日常代码交流和提升工程师的代码能力。","keywords":"代码,codeReview","labels":["学习"],"date":"2019-09-17T00:00:00.000Z"},"body":">There are about 15-20 common mistakes made by programmers.\n> A checklist is a useful means of ensuring that common mistakes are identified.\n\n公司能有CodeReview的实践是非常好的。它最终的作用是促进工程师日常代码交流和提升工程师的代码能力。\n\n## 明确代码规范\n\n无论前端还是后端，代码规范是很重要的。不应该把过多的CodeReview时间放在诸如代码空格、缩进等问题，这都是可以通过代码规范去约束的。各个开发人员都要尽力去写出符合公司代码规范的代码，减少CodeReview时间。\n\n## CodeReview 检查项\n\n有一个简单明确的检查项可以快速对代码进行检查，不用担心遗漏某些必要的项。以下的列表提供建议，可以按公司内要求进行优化添加等。\n\n### 一般\n\n- 代码是否符合预期的功能，逻辑是否正确。\n- 所写的代码是否容易理解。\n- 代码是否符合规定的编码规范。\n- 是否有冗余或者重复编写的代码。\n- 是否尽可能的模块化/组件化。\n- 全局变量是否全局定义（可以快速修改不必多处查找遗漏）。\n- 是否留下注释的代码（视情况保留，一般不要存在好些）。\n- 循环是否正确设置了结束条件。\n- 代码设置的变量命名是否符合语义，易于理解。\n\n### 性能上\n\n- 是否还有更好的能提升既有性能的有效方法。\n- 是否有内置函数或者成熟的库/组件能替换已有代码。\n- 是否已移除掉日志和debug代码。\n\n### 安全上\n\n- 输入类型的代码是否检查了类型、长度、提交格式等，后台是否对输入进行编码（encode）。（防xss）\n- 使用的第三方库有无错误异常捕获处理。\n- 容易出错的地方是否进行异常捕获处理。\n- 代码是否对变量做了空值判断处理。\n\n### 解释说明上\n\n- 代码的作用是否有注释留下描述。\n- 所有函数都做了注释吗？\n- 有没对所有代码异常和边缘情况做好判断处理。\n- 引入的第三方库/组件是否做了必要的用途和引入说明。\n- 有没有不完整的代码？如果有，那代码可不可以删除或者标记TODO等？\n\n### Reviewer && Author\n\n这部分原文在：[戳](https://phauer.com/2018/code-review-guidelines/)\n\n- **用I-Messages**\n\n> You are not your code.\n\n要知道 `You !== Your Code`。给代码review错误不是对人review错误，不要把人自身价值和人写的代码连接起来。每个人都是团队中有价值的一部分。  \n在Author和Reviewer之间应该交换业务最好的实践、经验、一些踩坑点还有一些提示。  \nReviewer在代码反馈上，有一个小规则我觉得挺有意思的：用I-Messages代替I-Messages。\n\n错误: “**你**写的这段代码存在黑魔法。”\n\n正确: “这段代码**我**不是很理解哦。”\n\n- **讨论对象是代码不是人呐**\n\n只讨论代码可以增加review反馈的可接受度。\n\n错误: “**你**写的这代码请求了多次接口，这会影响性能。”\n\n正确: “**这段代码**触发多次请求了，应该会影响性能。”\n\n-  **提问题**\n\n好的方式提问题，让人更好的接受。\n\n错误: “这变量就应该命名为UserId。”\n\n正确: “如果这变量命名为UserId是不是好理解多了？”\n","bodyBegin":9,"frontmatter":"title: CodeReview\ndescription: 公司能有CodeReview的实践是非常好的。它最终的作用是促进工程师日常代码交流和提升工程师的代码能力。\nkeywords: 代码,codeReview\nlabels: ['学习']\ndate: 2019-09-17"}}