{"title":"2019/12/docker-nuxtjs.md","path":"2019/12/docker-nuxtjs","slug":"2019_12_docker-nuxtjs","html":"<p>有个主页的项目需要用到ssr。所以选择nuxtjs进行主页开发。关于nextjs的使用可以到官方文档进行查看。这里主要是记录一下docker部署nuxtjs应用的一些小事情。</p>\n<h2 id=\"dockerfile\">Dockerfile</h2>\n<p>通过dockerfile可以build一个docker镜像。dockerfile内容如下：</p>\n<pre><code class=\"language-dockerfile\"><span class=\"hljs-keyword\">FROM</span> node:<span class=\"hljs-number\">11.13</span>.<span class=\"hljs-number\">0</span>-alpine\n\n<span class=\"hljs-comment\"># create destination directory</span>\n<span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> mkdir -p /app</span>\n<span class=\"hljs-keyword\">WORKDIR</span><span class=\"bash\"> /app</span>\n\n<span class=\"hljs-comment\"># copy the app, note .dockerignore</span>\n<span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> . /app</span>\n<span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> npm install</span>\n\n<span class=\"hljs-comment\"># build necessary, even if no static files are needed,</span>\n<span class=\"hljs-comment\"># since it builds the server as well</span>\n<span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> npm run build</span>\n\n<span class=\"hljs-comment\"># expose 3000 on container</span>\n<span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">3000</span>\n\n<span class=\"hljs-comment\"># set app serving to permissive / assigned</span>\n<span class=\"hljs-keyword\">ENV</span> NUXT_HOST=<span class=\"hljs-number\">0.0</span>.<span class=\"hljs-number\">0.0</span>\n<span class=\"hljs-comment\"># set app port</span>\n<span class=\"hljs-keyword\">ENV</span> NUXT_PORT=<span class=\"hljs-number\">3000</span>\n\n<span class=\"hljs-comment\"># start the app</span>\n<span class=\"hljs-keyword\">CMD</span><span class=\"bash\"> [ <span class=\"hljs-string\">\"npm\"</span>, <span class=\"hljs-string\">\"start\"</span> ]</span></code></pre>\n<p>注意：</p>\n<ol>\n<li>部署 Nuxt.js 服务端渲染的应用不能直接使用 nuxt 命令，而应该先进行编译构建，然后再启动 Nuxt 服务。</li>\n<li>在build之前，需要ignore以下三个规则文件（手动创建.dockerignore文件）：</li>\n</ol>\n<pre><code>node_modules\nnpm-debug*\n.nuxt</code></pre>\n<p>否则会出现镜像build失败的情况。</p>\n<p>运行命令：docker run -it -d -p 3000:3000 gzhiyi/nuxt-homepage  后面为镜像build后的名称，注意按实际情况进行更改。</p>\n<h2 id=\"nginx配置\">nginx配置</h2>\n<p>Docker运行node服务，如果需要外部访问的话，需要nginx反向代理。具体配置：</p>\n<pre><code class=\"language-nginx\"><span class=\"hljs-section\">server</span> {\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-attribute\">server_name</span> *your servername*;\n    <span class=\"hljs-attribute\">location</span> / {\n        <span class=\"hljs-attribute\">proxy_pass</span> http://localhost:3000;\n        <span class=\"hljs-attribute\">proxy_http_version</span> <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span> Upgrade <span class=\"hljs-variable\">$http_upgrade</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span> Connection <span class=\"hljs-string\">'upgrade'</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span> Host <span class=\"hljs-variable\">$host</span>;\n        <span class=\"hljs-attribute\">proxy_cache_bypass</span> <span class=\"hljs-variable\">$http_upgrade</span>;\n    }\n}</code></pre>\n<h2 id=\"访问\">访问</h2>\n<p>需要配置host才能访问，如下：</p>\n<pre><code class=\"language-hosts\">*your serverip* *your servername*</code></pre>\n","fmData":{"attributes":{"title":"Docker部署nuxtjs应用","description":"有个主页的项目需要用到ssr。所以选择nuxtjs进行主页开发。关于nextjs的使用可以到官方文档进行查看。这里主要是记录一下docker部署nuxtjs应用的一些小事情。","keywords":"docker,nuxtjs,ssr","labels":["前端"],"date":"2019-12-25T00:00:00.000Z"},"body":"有个主页的项目需要用到ssr。所以选择nuxtjs进行主页开发。关于nextjs的使用可以到官方文档进行查看。这里主要是记录一下docker部署nuxtjs应用的一些小事情。\n\n## Dockerfile\n\n通过dockerfile可以build一个docker镜像。dockerfile内容如下：\n```dockerfile\nFROM node:11.13.0-alpine\n\n# create destination directory\nRUN mkdir -p /app\nWORKDIR /app\n\n# copy the app, note .dockerignore\nCOPY . /app\nRUN npm install\n\n# build necessary, even if no static files are needed,\n# since it builds the server as well\nRUN npm run build\n\n# expose 3000 on container\nEXPOSE 3000\n\n# set app serving to permissive / assigned\nENV NUXT_HOST=0.0.0.0\n# set app port\nENV NUXT_PORT=3000\n\n# start the app\nCMD [ \"npm\", \"start\" ]\n```\n\n注意：\n1. 部署 Nuxt.js 服务端渲染的应用不能直接使用 nuxt 命令，而应该先进行编译构建，然后再启动 Nuxt 服务。\n2. 在build之前，需要ignore以下三个规则文件（手动创建.dockerignore文件）：\n\n```\nnode_modules\nnpm-debug*\n.nuxt\n```\n\n否则会出现镜像build失败的情况。\n\n运行命令：docker run -it -d -p 3000:3000 gzhiyi/nuxt-homepage  后面为镜像build后的名称，注意按实际情况进行更改。\n\n## nginx配置\n\nDocker运行node服务，如果需要外部访问的话，需要nginx反向代理。具体配置：\n\n```nginx\nserver {\n    listen 80;\n    server_name *your servername*;\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n```\n## 访问\n需要配置host才能访问，如下：\n\n```hosts\n*your serverip* *your servername*\n```","bodyBegin":9,"frontmatter":"title: Docker部署nuxtjs应用\ndescription: 有个主页的项目需要用到ssr。所以选择nuxtjs进行主页开发。关于nextjs的使用可以到官方文档进行查看。这里主要是记录一下docker部署nuxtjs应用的一些小事情。\nkeywords: docker,nuxtjs,ssr\nlabels: ['前端']\ndate: 2019-12-25"}}