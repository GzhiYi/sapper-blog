{"title":"Docker部署nuxtjs应用","description":"有个主页的项目需要用到ssr。所以选择nuxtjs进行主页开发。关于nextjs的使用可以到官方文档进行查看。这里主要是记录一下docker部署nuxtjs应用的一些小事情。","keywords":"docker,nuxtjs,ssr","labels":["前端"],"date":"2019-12-25","path":"2019/12/docker-nuxtjs.md","slug":"2019_12_docker-nuxtjs","html":"<p>有个主页的项目需要用到ssr。所以选择nuxtjs进行主页开发。关于nextjs的使用可以到官方文档进行查看。这里主要是记录一下docker部署nuxtjs应用的一些小事情。</p>\n<h2 id=\"dockerfile\">Dockerfile</h2>\n<p>通过dockerfile可以build一个docker镜像。dockerfile内容如下：</p>\n<pre><code class=\"language-dockerfile\"><span class=\"hljs-keyword\">FROM</span> node:11.13.0-alpine\n\n<span class=\"hljs-comment\"># create destination directory</span>\n<span class=\"hljs-builtin-name\">RUN</span> mkdir -p /app\nWORKDIR /app\n\n<span class=\"hljs-comment\"># copy the app, note .dockerignore</span>\nCOPY . /app\n<span class=\"hljs-builtin-name\">RUN</span> npm install\n\n<span class=\"hljs-comment\"># build necessary, even if no static files are needed,</span>\n<span class=\"hljs-comment\"># since it builds the server as well</span>\n<span class=\"hljs-builtin-name\">RUN</span> npm <span class=\"hljs-builtin-name\">run</span> build\n\n<span class=\"hljs-comment\"># expose 3000 on container</span>\nEXPOSE 3000\n\n<span class=\"hljs-comment\"># set app serving to permissive / assigned</span>\nENV <span class=\"hljs-attribute\">NUXT_HOST</span>=0.0.0.0\n<span class=\"hljs-comment\"># set app port</span>\nENV <span class=\"hljs-attribute\">NUXT_PORT</span>=3000\n\n<span class=\"hljs-comment\"># start the app</span>\nCMD [ <span class=\"hljs-string\">&quot;npm&quot;</span>, <span class=\"hljs-string\">&quot;start&quot;</span> ]\n</code></pre>\n<p>注意：</p>\n<ol>\n<li>部署 Nuxt.js 服务端渲染的应用不能直接使用 nuxt 命令，而应该先进行编译构建，然后再启动 Nuxt 服务。</li>\n<li>在build之前，需要ignore以下三个规则文件（手动创建.dockerignore文件）：</li>\n</ol>\n<pre><code><span class=\"hljs-attribute\">node_modules</span>\nnpm-<span class=\"hljs-literal\">debug</span>*\n.nuxt\n</code></pre>\n<p>否则会出现镜像build失败的情况。</p>\n<p>运行命令：docker run -it -d -p 3000:3000 gzhiyi/nuxt-homepage  后面为镜像build后的名称，注意按实际情况进行更改。</p>\n<h2 id=\"nginx配置\">nginx配置</h2>\n<p>Docker运行node服务，如果需要外部访问的话，需要nginx反向代理。具体配置：</p>\n<pre><code class=\"language-nginx\"><span class=\"hljs-section\">server</span> {\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-attribute\">server_name</span> *your servername*;\n    <span class=\"hljs-attribute\">location</span> / {\n        <span class=\"hljs-attribute\">proxy_pass</span> http://localhost:3000;\n        <span class=\"hljs-attribute\">proxy_http_version</span> <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span> Upgrade $http_upgrade;\n        <span class=\"hljs-attribute\">proxy_set_header</span> Connection <span class=\"hljs-string\">&#x27;upgrade&#x27;</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span> Host $host;\n        <span class=\"hljs-attribute\">proxy_cache_bypass</span> $http_upgrade;\n    }\n}\n</code></pre>\n<h2 id=\"访问\">访问</h2>\n<p>需要配置host才能访问，如下：</p>\n<pre><code class=\"language-hosts\"><span class=\"hljs-comment\">*your serverip* *your servername*</span>\n</code></pre>\n"}