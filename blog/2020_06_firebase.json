{"title":"用firebase给静态博客页面增加点赞功能","description":"用firebase给静态博客页面增加点赞功能","keywords":"firebase,like","labels":["前端"],"date":"2020-06-28","path":"2020/06/firebase.md","slug":"2020_06_firebase","html":"<p>想给博客增加一个点赞功能。最后，看起来就是这样：</p>\n<p><img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://i.loli.net/2020/06/28/Ej9in7gr5uNHIJO.jpg\" alt=\"like\" ></p>\n<p>实现这个功能要考虑几个问题：</p>\n<ol>\n<li>没有服务器，接口怎么编写部署？</li>\n<li>博客没有登录，数据库设计的时候怎么识别用户唯一性。</li>\n</ol>\n<h2 id=\"firebase\">Firebase</h2>\n<p>对于firebase的介绍，最好是直接进入<a target='_blank'  href=\"https://firebase.google.com\">主站</a>开通spark版尝试。</p>\n<p>使用firebase，就可以很好的解决第一个问题。spark方案提供免费的空间支持，对于博客这种量级小，交互少的页面来说再适合不过了。</p>\n<p>如果用过tx云的云开发，就可以知道，其实概念有些相似，甚至在云函数的编写上也有几分相似。</p>\n<h2 id=\"fingerprintjs2\">fingerprintjs2</h2>\n<p>利用<a target='_blank'  href=\"https://github.com/fingerprintjs/fingerprintjs2\">fingerprintjs2</a>，可以通过user agent等信息生成用户唯一的一个ID，虽然不能100%保证用户唯一性，但对于无需登录的博客而言，已经足够了。\n生成指纹的主要用法：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-attribute\">Fingerprint2</span>.x<span class=\"hljs-number\">64</span>hash<span class=\"hljs-number\">128</span>(values.join(&#x27;&#x27;), <span class=\"hljs-number\">31</span>)\n</code></pre>\n<h2 id=\"过程\">过程</h2>\n<p>整个过程，时间大部分花在云函数执行数据库操作语法上。以下前提是开通了firebase的spark方案，开通方式直接明了就不赘述啦。</p>\n<h3 id=\"控制台\">控制台</h3>\n<p>需要在控制台创建你的一个项目，创建好项目之后再执行下面的步骤。</p>\n<h3 id=\"函数（functions）编写\">函数（functions）编写</h3>\n<p>相关代码可以查看：<a target='_blank'  href=\"https://github.com/GzhiYi/blog-like/blob/master/functions/index.js\">blog-like</a></p>\n<ol>\n<li>安装Firebase CLI工具以初始化函数仓库。</li>\n</ol>\n<pre><code class=\"language-bash\">npm <span class=\"hljs-keyword\">install</span> -g firebase-tools\n</code></pre>\n<ol start=\"2\">\n<li>登录</li>\n</ol>\n<pre><code class=\"language-bash\"><span class=\"hljs-attribute\">firebase login</span>\n</code></pre>\n<ol start=\"3\">\n<li>创建一个空目录，然后初始化这个目录，例如目录名为blog-like</li>\n</ol>\n<pre><code class=\"language-bash\">mkdir blog-<span class=\"hljs-meta\">like</span> <span class=\"hljs-variable\">&amp;&amp;</span> cd blog-<span class=\"hljs-meta\">like</span> <span class=\"hljs-variable\">&amp;&amp;</span> firebase init\n</code></pre>\n<p>执行init命令后会提示选择新建项目的一些规则。（以下是规则过程）</p>\n<p><code>q: Which Firebase CLI features do you want to set up for this folder? Press Space to select features, then Enter to confirm your choices.</code>\n<code>a: 选择Firestore: Deploy rules and create indexes for Firestore以及Functions: Configure and deploy Cloud Functions</code>  </p>\n<p><code>q: Please select an option:</code>\n<code>a: Use an existing project，随后选择在控制台创建的项目。</code></p>\n<p>随后几个按enter就好了。</p>\n<ol start=\"4\">\n<li>函数编写。</li>\n</ol>\n<p>需要两个接口，一个是新增点赞接口，路由为：<code>/newLike</code>，一个是获取点赞数据的接口，路由为：<code>/getLikes</code>。</p>\n<ul>\n<li>newLike。先判断该用户是否已经点过赞。需要存储的数据：文章标题、点赞时间、用户指纹。</li>\n<li>getLikes。先获取该文章点赞总数，在判断用户是否已经点过赞。</li>\n</ul>\n<p>有了以下基本代码：</p>\n<p>点赞数据表：</p>\n<pre><code class=\"language-json\">{\n    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 用户指纹，\n    likeTime</span>：点赞时间，\n    postTitle：文章标题\n}\n</code></pre>\n<p>newLike，创建点赞数据：</p>\n<pre><code class=\"language-javascript\">db<span class=\"hljs-built_in\">.collection</span>(<span class=\"hljs-string\">&#x27;like&#x27;</span>)\n  .<span class=\"hljs-keyword\">where</span>(<span class=\"hljs-string\">&quot;postTitle&quot;</span>, <span class=\"hljs-string\">&quot;==&quot;</span>, request.body.title)\n  .get()\n  .<span class=\"hljs-keyword\">then</span>(res =&gt; {\n  <span class=\"hljs-keyword\">let</span> isLike =<span class=\"hljs-built_in\"> false</span>\n  <span class=\"hljs-keyword\">try</span> {\n    // 判断是否已经点赞过\n    res.forEach<span class=\"hljs-built_in\">(doc</span> =&gt; {\n      <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">(doc</span><span class=\"hljs-built_in\">.id</span> === request.body<span class=\"hljs-built_in\">.id</span> &amp;&amp; !isLike) {\n        isLike =<span class=\"hljs-built_in\"> true</span>\n      }\n    })\n    <span class=\"hljs-keyword\">if</span> (!isLike) {\n      <span class=\"hljs-keyword\">let</span> docRef = db<span class=\"hljs-built_in\">.collection</span>(<span class=\"hljs-string\">&#x27;like&#x27;</span>)<span class=\"hljs-built_in\">.doc</span>(params<span class=\"hljs-built_in\">.id</span>);\n      docRef.set({\n        postTitle: params.title,\n        likeTime: new Date().toLocaleString()\n      });\n      response.send({\n        data: <span class=\"hljs-string\">&#x27;like success!&#x27;</span>,\n        code: <span class=\"hljs-number\">0</span>\n      })\n    } <span class=\"hljs-keyword\">else</span> {\n      response.send({\n        data: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n        message: <span class=\"hljs-string\">&#x27;like 过啦&#x27;</span>,\n        code: <span class=\"hljs-number\">1</span>\n      })\n    }\n  } <span class=\"hljs-keyword\">catch</span> <span class=\"hljs-built_in\">(error</span>) {\n    console.log(<span class=\"hljs-string\">&#x27;error&#x27;</span>,<span class=\"hljs-built_in\"> error</span>)\n  }\n})\n</code></pre>\n<p>getLikes，获取点赞数据：</p>\n<pre><code class=\"language-javascript\">db<span class=\"hljs-built_in\">.collection</span>(<span class=\"hljs-string\">&#x27;like&#x27;</span>)\n  .<span class=\"hljs-keyword\">where</span>(<span class=\"hljs-string\">&quot;postTitle&quot;</span>, <span class=\"hljs-string\">&quot;==&quot;</span>, title)\n  .get()\n  .<span class=\"hljs-keyword\">then</span>(res =&gt; {\n  <span class=\"hljs-keyword\">let</span> isLike =<span class=\"hljs-built_in\"> false</span>\n  <span class=\"hljs-keyword\">try</span> {\n    res.forEach<span class=\"hljs-built_in\">(doc</span> =&gt; {\n      <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">(doc</span><span class=\"hljs-built_in\">.id</span> ===<span class=\"hljs-built_in\"> id</span> &amp;&amp; !isLike) {\n        isLike =<span class=\"hljs-built_in\"> true</span>\n      }\n    })\n  } <span class=\"hljs-keyword\">catch</span> <span class=\"hljs-built_in\">(error</span>) {\n    console.log(<span class=\"hljs-string\">&#x27;error&#x27;</span>,<span class=\"hljs-built_in\"> error</span>)\n  }\n  response.send({\n    data: res.size,\n    isLike,\n    message: <span class=\"hljs-string\">&#x27;oooooooook&#x27;</span>,\n    code: <span class=\"hljs-number\">0</span>\n  })\n})\n  .<span class=\"hljs-keyword\">catch</span><span class=\"hljs-built_in\">(error</span> =&gt; {\n  response.send({\n    data:<span class=\"hljs-built_in\"> error</span>,\n    message: request.body,\n    code: <span class=\"hljs-number\">1</span>\n  })\n})\n</code></pre>\n<p>在函数编写之后，执行命令就可以部署到云端啦。</p>\n<pre><code class=\"language-bash\">firebase <span class=\"hljs-keyword\">deploy</span> <span class=\"hljs-params\">--only</span> functions\n</code></pre>\n<h2 id=\"用户端\">用户端</h2>\n<p>在博客页面上生成用户唯一ID后用fetch请求点赞接口就可以了。</p>\n<p>另外，跨域问题需要函数端用上cors处理。详细的都可以在<a target='_blank'  href=\"https://github.com/GzhiYi/blog-like\">仓库</a>看到。</p>\n<h2 id=\"体验\">体验</h2>\n<p>最后说一下体验。整个开发过程比较愉快，花了点点时间查阅数据库操作语法。上线尝试访问，发现google的果然访问好慢！</p>\n<p>你可以点击下面clap按钮试试，如果没有，说明网络问题，unreachable。</p>\n"}