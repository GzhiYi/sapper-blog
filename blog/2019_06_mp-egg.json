{"title":"2019/06/mp-egg.md","path":"2019/06/mp-egg","slug":"2019_06_mp-egg","html":"<p>如果不需要后端java或者其他语言支持，对于小型的小程序后台，可以使用eggjs框架快速搭建简要的数据后台。</p>\n<p>如果未接触过node编写接口，首先还是需要基本过一下<a target='_blank'  href=\"https://eggjs.org/zh-cn/intro/\">egg官方文档</a>，至少得把快速入门看完。</p>\n<p>不会从头开始把每一步都详细写下来，只针对微信对接的一些处理列出来。</p>\n<h2 id=\"数据库\">数据库</h2>\n<p>使用mongo，示例通过<a target='_blank'  href=\"https://github.com/eggjs/egg-mongoose\">egg-mongoose</a>进行连接处理。</p>\n<p>安装插件后，在<code>/config/plugin.js</code>进行基本配置：</p>\n<pre><code class=\"language-javascript\">mongoose: {\n  <span class=\"hljs-attr\">enable</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">package</span>: <span class=\"hljs-string\">'egg-mongoose'</span>\n}</code></pre>\n<p>在<code>/config/config.default.js</code>文件中配置mongodb的连接（保证本地测试环境数据库连接好）：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// connect mongo</span>\n  config.mongoose = {\n    <span class=\"hljs-attr\">client</span>: {\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">'mongodb://127.0.0.1/fulishe'</span>,\n      <span class=\"hljs-attr\">options</span>: {},\n    }\n  }</code></pre>\n<p>在<code>/app/models</code>文件夹编写相关的model，在程序运行时会自动在mongo上创建对应的表。也可以优先创建好数据库和表设计等。</p>\n<h2 id=\"编写接口\">编写接口</h2>\n<p>在<code>controller</code>写主要的业务逻辑，接受接口请求参数并返回。\n对于入参，需要进行验证的可以做验证处理，需要处理返回结果，即使请求出错也不要返回非200的状态码。\n可以将处理结果设置为一个函数，如：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// data: 返回给前端的数据，code: 状态，1为成功，0为失败，message：状态信息</span>\n<span class=\"hljs-attr\">formatResponse</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data, code, message</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    code,\n    data,\n    message\n  }\n}</code></pre>\n<p>!&gt; 为避免出现出现问题而导致程序中断，最好在每一个容易出现问题的地方进行<code>try catch</code>将异常抛出并返回到前端。</p>\n<p>在<code>service</code>编写数据库操作函数等，通过在<code>controller</code>进行调用，统一管理数据库数据进出。\n注意在数据新增的时候需要进行<code>save</code>操作：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> addUser = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.ctx.model.Users(data)\naddUser.save() <span class=\"hljs-comment\">// 不要遗漏</span></code></pre>\n<p>相关的增删改查操作，需要直接点的可以看仓库<code>app/service</code>下的写法。</p>\n<h2 id=\"小程序接口相关\">小程序接口相关</h2>\n<p>以下是eggjs对小程序包括获取openId、获取unionId、获取手机号码、判断用户是否关注公众号、客服信息发送进行编写说明。<br>如果某个对象不知道是什么，一般都是可以根据名字找到对于的js文件或者通过npm引入，不再表述引入什么了。</p>\n<h3 id=\"获取openid\">获取openId</h3>\n<p>参数说明：</p>\n<ul>\n<li>APPID： 小程序的appId</li>\n<li>SECRET： 小程序的secret，跟appId在同一个地方能找到</li>\n<li>CODE：小程序在前端通过wx.login()获取的jscode</li>\n</ul>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> openIdRes = <span class=\"hljs-keyword\">await</span> rp(<span class=\"hljs-string\">`https://api.weixin.qq.com/sns/jscode2session?appid=<span class=\"hljs-subst\">${APPID}</span>&amp;secret=<span class=\"hljs-subst\">${SECRET}</span>&amp;js_code=<span class=\"hljs-subst\">${CODE}</span>&amp;grant_type=authorization_code`</span>)\n<span class=\"hljs-keyword\">const</span> openId = <span class=\"hljs-built_in\">JSON</span>.parse(openIdRes).openId <span class=\"hljs-comment\">// 在处理错误判断后，返回的数据是json字符串，需要转化</span></code></pre>\n<h3 id=\"获取unionid\">获取unionId</h3>\n<p>unionId，属于微信端通用的账号唯一标识，举个例子就是同一个微信号，唯一对应一个unionId。而在每一个小程序上，用户openId都不一样。可以用于判断在小程序上的用户是否关注公众号等。</p>\n<p>在第一个获取<code>openId</code>的时候，会返回<code>openId</code>以及<code>session_key</code>，通过小程序前端传过来的<code>encryptedData</code>以及<code>iv</code>就可以拿到<code>unionId</code>。</p>\n<p>参数说明：</p>\n<ul>\n<li>APPID： 小程序的appId</li>\n<li>sessionKey：获取openId的时候，一并返回了sessionKey</li>\n<li>encryptedData：小程序在前端通过获取用户信息返回</li>\n<li>iv：小程序在前端通过获取用户信息返回</li>\n</ul>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> pc = <span class=\"hljs-keyword\">new</span> WXBizDataCrypt(APPID, sessionKey)\n<span class=\"hljs-keyword\">const</span> data = pc.decryptData(encryptedData, iv)\n<span class=\"hljs-keyword\">const</span> unionId = data.unionId</code></pre>\n<h3 id=\"获取手机号码\">获取手机号码</h3>\n<p>获取手机号码的步骤跟获取unionId一样。</p>\n<p>只需要注意的是，<code>encryptedData</code>、<code>iv</code>是在小程序端通过<code>getPhoneNumber</code>获取。</p>\n<h3 id=\"判断用户是否关注公众号\">判断用户是否关注公众号</h3>\n<p>这里单独在小程序后台无法判断。需要在对于的公众号后台提供一个接口用于判断该unionId是否已经关注了公众号。</p>\n<h3 id=\"客服信息发送\">客服信息发送</h3>\n<p>在小程序开发设置中配置消息推送。</p>\n<p>配置参考： </p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>值</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>URL(服务器地址)</td>\n<td>https://<em>.</em>.com/message/check</td>\n<td>微信那边与你服务器通信的接口</td>\n</tr>\n<tr>\n<td>Token(令牌)</td>\n<td>isToken</td>\n<td>自定义</td>\n</tr>\n<tr>\n<td>EncodingAESKey(消息加密密钥)</td>\n<td><strong>**</strong></td>\n<td>填写那可以自动生成</td>\n</tr>\n<tr>\n<td>消息加密方式</td>\n<td>兼容模式</td>\n<td>涉及信息安全</td>\n</tr>\n<tr>\n<td>数据格式</td>\n<td>JSON</td>\n<td>一般是这个吧</td>\n</tr>\n</tbody></table>\n<p>在<code>controller</code>层编写一个<code>get</code>接口，对应<code>/message/check</code>，用以给微信进行服务器验证。\n完整验证函数接口可如下：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">async</span> index() {\n  <span class=\"hljs-keyword\">const</span> { ctx } = <span class=\"hljs-keyword\">this</span>\n  <span class=\"hljs-comment\">// 1.获取微信服务器Get请求的参数 signature、timestamp、nonce、echostr</span>\n  <span class=\"hljs-keyword\">const</span> {\n    signature,\n    timestamp,\n    nonce,\n    echostr\n  } = ctx.query\n\n  <span class=\"hljs-comment\">// 2.将token、timestamp、nonce三个参数进行字典序排序</span>\n  <span class=\"hljs-keyword\">let</span> array = [<span class=\"hljs-string\">'线上配置的令牌'</span>, timestamp, nonce]\n  array.sort() <span class=\"hljs-comment\">// JavaScript sort函数就是字典序排序的</span>\n\n  <span class=\"hljs-comment\">// 3.将三个参数字符串拼接成一个字符串进行sha1加密</span>\n  <span class=\"hljs-keyword\">const</span> tempStr = array.join(<span class=\"hljs-string\">''</span>)\n  <span class=\"hljs-keyword\">const</span> hashCode = crypto.createHash(<span class=\"hljs-string\">'sha1'</span>) <span class=\"hljs-comment\">//创建加密类型</span>\n  <span class=\"hljs-keyword\">const</span> resultCode = hashCode.update(tempStr, <span class=\"hljs-string\">'utf8'</span>).digest(<span class=\"hljs-string\">'hex'</span>)\n\n  <span class=\"hljs-comment\">// 4.开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</span>\n  <span class=\"hljs-keyword\">if</span> (resultCode === signature) {\n    ctx.body = echostr\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 非微信服务器请求</span>\n    ctx.body = format.formatResponse({\n      resultCode,\n      <span class=\"hljs-attr\">req</span>: ctx.query\n    }, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">'验证失败1'</span>)\n  }\n}</code></pre>\n<p>自动回复操作：\n在<code>controller</code>层编写一个<code>post</code>接口，对应<code>/message/check</code>，用于自动回复。\n完整处理自动回复接口：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">async</span> handle() {\n  <span class=\"hljs-keyword\">const</span> { ctx } = <span class=\"hljs-keyword\">this</span>\n  <span class=\"hljs-keyword\">const</span> { FromUserName, MsgType, Content } = ctx.request.body <span class=\"hljs-comment\">// 这是从微信转发过来的用户发送的信息参数</span>\n  <span class=\"hljs-keyword\">const</span> { openid } = ctx.query\n  <span class=\"hljs-comment\">// 获取accessToken</span>\n  <span class=\"hljs-keyword\">const</span> tokenRes = <span class=\"hljs-keyword\">await</span> rp(<span class=\"hljs-string\">`https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=<span class=\"hljs-subst\">${CONST.appId}</span>&amp;secret=<span class=\"hljs-subst\">${CONST.secret}</span>`</span>)\n  <span class=\"hljs-keyword\">if</span> (!(<span class=\"hljs-string\">'errcode'</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">JSON</span>.parse(tokenRes))) {\n    <span class=\"hljs-keyword\">if</span> (MsgType === <span class=\"hljs-string\">'text'</span>) {\n      <span class=\"hljs-keyword\">const</span> postData = {\n        <span class=\"hljs-attr\">touser</span>: openid,\n        <span class=\"hljs-attr\">msgtype</span>: <span class=\"hljs-string\">\"link\"</span>,\n        <span class=\"hljs-attr\">link</span>: {\n          <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'链接标题'</span>,\n          <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">'链接描述'</span>,\n          <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">'链接'</span>,\n          <span class=\"hljs-attr\">thumb_url</span>: <span class=\"hljs-string\">'链接封面图'</span>\n        }\n      }\n      <span class=\"hljs-keyword\">const</span> sendRes = <span class=\"hljs-keyword\">await</span> rp({\n        <span class=\"hljs-attr\">uri</span>: <span class=\"hljs-string\">`https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token=<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">JSON</span>.parse(tokenRes).access_token}</span>`</span>,\n        <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'post'</span>,\n        <span class=\"hljs-attr\">body</span>: postData,\n        <span class=\"hljs-attr\">json</span>: <span class=\"hljs-literal\">true</span>\n      })\n    }\n  }\n  ctx.body = <span class=\"hljs-string\">'success'</span>\n}</code></pre>\n<p>!&gt; 注意：需要在自动回复的最后返回<code>success</code>，否则会在聊天窗口看到提示：<code>该小程序提供的服务出现故障，请稍后再试</code></p>\n","fmData":{"attributes":{"title":"小程序egg后台简要文档","description":"如果不需要后端java或者其他语言支持，对于小型的小程序后台，可以使用eggjs框架快速搭建简要的数据后台。","keywords":"mp,小程序,eggjs,微信开发后台","labels":["小程序"],"date":"2019-06-06T00:00:00.000Z"},"body":"如果不需要后端java或者其他语言支持，对于小型的小程序后台，可以使用eggjs框架快速搭建简要的数据后台。\n\n如果未接触过node编写接口，首先还是需要基本过一下[egg官方文档](https://eggjs.org/zh-cn/intro/)，至少得把快速入门看完。\n\n不会从头开始把每一步都详细写下来，只针对微信对接的一些处理列出来。\n\n## 数据库\n\n使用mongo，示例通过[egg-mongoose](https://github.com/eggjs/egg-mongoose)进行连接处理。\n\n安装插件后，在`/config/plugin.js`进行基本配置：\n\n```javascript\nmongoose: {\n  enable: true,\n  package: 'egg-mongoose'\n}\n```\n\n在`/config/config.default.js`文件中配置mongodb的连接（保证本地测试环境数据库连接好）：\n\n```javascript\n// connect mongo\n  config.mongoose = {\n    client: {\n      url: 'mongodb://127.0.0.1/fulishe',\n      options: {},\n    }\n  }\n```\n\n在`/app/models`文件夹编写相关的model，在程序运行时会自动在mongo上创建对应的表。也可以优先创建好数据库和表设计等。\n\n## 编写接口\n\n在`controller`写主要的业务逻辑，接受接口请求参数并返回。\n对于入参，需要进行验证的可以做验证处理，需要处理返回结果，即使请求出错也不要返回非200的状态码。\n可以将处理结果设置为一个函数，如：\n\n```javascript\n// data: 返回给前端的数据，code: 状态，1为成功，0为失败，message：状态信息\nformatResponse: function (data, code, message) {\n  return {\n    code,\n    data,\n    message\n  }\n}\n```\n\n!> 为避免出现出现问题而导致程序中断，最好在每一个容易出现问题的地方进行`try catch`将异常抛出并返回到前端。\n\n在`service`编写数据库操作函数等，通过在`controller`进行调用，统一管理数据库数据进出。\n注意在数据新增的时候需要进行`save`操作：\n\n```javascript\nconst addUser = await this.ctx.model.Users(data)\naddUser.save() // 不要遗漏\n```\n\n相关的增删改查操作，需要直接点的可以看仓库`app/service`下的写法。\n\n## 小程序接口相关\n\n以下是eggjs对小程序包括获取openId、获取unionId、获取手机号码、判断用户是否关注公众号、客服信息发送进行编写说明。  \n如果某个对象不知道是什么，一般都是可以根据名字找到对于的js文件或者通过npm引入，不再表述引入什么了。\n\n### 获取openId\n\n参数说明：\n\n- APPID： 小程序的appId\n- SECRET： 小程序的secret，跟appId在同一个地方能找到\n- CODE：小程序在前端通过wx.login()获取的jscode\n\n```javascript\nconst openIdRes = await rp(`https://api.weixin.qq.com/sns/jscode2session?appid=${APPID}&secret=${SECRET}&js_code=${CODE}&grant_type=authorization_code`)\nconst openId = JSON.parse(openIdRes).openId // 在处理错误判断后，返回的数据是json字符串，需要转化\n```\n\n### 获取unionId\n\nunionId，属于微信端通用的账号唯一标识，举个例子就是同一个微信号，唯一对应一个unionId。而在每一个小程序上，用户openId都不一样。可以用于判断在小程序上的用户是否关注公众号等。\n\n在第一个获取`openId`的时候，会返回`openId`以及`session_key`，通过小程序前端传过来的`encryptedData`以及`iv`就可以拿到`unionId`。\n\n参数说明：\n\n- APPID： 小程序的appId\n- sessionKey：获取openId的时候，一并返回了sessionKey\n- encryptedData：小程序在前端通过获取用户信息返回\n- iv：小程序在前端通过获取用户信息返回\n\n```javascript\nconst pc = new WXBizDataCrypt(APPID, sessionKey)\nconst data = pc.decryptData(encryptedData, iv)\nconst unionId = data.unionId\n```\n\n### 获取手机号码\n\n获取手机号码的步骤跟获取unionId一样。\n\n只需要注意的是，`encryptedData`、`iv`是在小程序端通过`getPhoneNumber`获取。\n\n### 判断用户是否关注公众号\n\n这里单独在小程序后台无法判断。需要在对于的公众号后台提供一个接口用于判断该unionId是否已经关注了公众号。\n\n### 客服信息发送\n\n在小程序开发设置中配置消息推送。\n\n配置参考： \n\n参数 | 值 |  备注  \n-|-|-\nURL(服务器地址) | https://*.*.com/message/check | 微信那边与你服务器通信的接口 |\nToken(令牌) | isToken | 自定义 |\nEncodingAESKey(消息加密密钥) | ****** | 填写那可以自动生成 |\n消息加密方式 | \t兼容模式 | 涉及信息安全 |\n数据格式 | \tJSON | 一般是这个吧 |\n\n在`controller`层编写一个`get`接口，对应`/message/check`，用以给微信进行服务器验证。\n完整验证函数接口可如下：\n\n```javascript\nasync index() {\n  const { ctx } = this\n  // 1.获取微信服务器Get请求的参数 signature、timestamp、nonce、echostr\n  const {\n    signature,\n    timestamp,\n    nonce,\n    echostr\n  } = ctx.query\n\n  // 2.将token、timestamp、nonce三个参数进行字典序排序\n  let array = ['线上配置的令牌', timestamp, nonce]\n  array.sort() // JavaScript sort函数就是字典序排序的\n\n  // 3.将三个参数字符串拼接成一个字符串进行sha1加密\n  const tempStr = array.join('')\n  const hashCode = crypto.createHash('sha1') //创建加密类型\n  const resultCode = hashCode.update(tempStr, 'utf8').digest('hex')\n\n  // 4.开发者获得加密后的字符串可与signature对比，标识该请求来源于微信\n  if (resultCode === signature) {\n    ctx.body = echostr\n  } else {\n    // 非微信服务器请求\n    ctx.body = format.formatResponse({\n      resultCode,\n      req: ctx.query\n    }, 0, '验证失败1')\n  }\n}\n```\n\n自动回复操作：\n在`controller`层编写一个`post`接口，对应`/message/check`，用于自动回复。\n完整处理自动回复接口：\n\n```javascript\nasync handle() {\n  const { ctx } = this\n  const { FromUserName, MsgType, Content } = ctx.request.body // 这是从微信转发过来的用户发送的信息参数\n  const { openid } = ctx.query\n  // 获取accessToken\n  const tokenRes = await rp(`https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=${CONST.appId}&secret=${CONST.secret}`)\n  if (!('errcode' in JSON.parse(tokenRes))) {\n    if (MsgType === 'text') {\n      const postData = {\n        touser: openid,\n        msgtype: \"link\",\n        link: {\n          title: '链接标题',\n          description: '链接描述',\n          url: '链接',\n          thumb_url: '链接封面图'\n        }\n      }\n      const sendRes = await rp({\n        uri: `https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token=${JSON.parse(tokenRes).access_token}`,\n        method: 'post',\n        body: postData,\n        json: true\n      })\n    }\n  }\n  ctx.body = 'success'\n}\n```\n!> 注意：需要在自动回复的最后返回`success`，否则会在聊天窗口看到提示：`该小程序提供的服务出现故障，请稍后再试`\n","bodyBegin":9,"frontmatter":"title: 小程序egg后台简要文档\ndescription: 如果不需要后端java或者其他语言支持，对于小型的小程序后台，可以使用eggjs框架快速搭建简要的数据后台。\nkeywords: mp,小程序,eggjs,微信开发后台\nlabels: ['小程序']\ndate: 2019-06-06"}}