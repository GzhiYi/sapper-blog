{"title":"2018/10/h5-step.md","path":"2018/10/h5-step","slug":"2018_10_h5-step","html":"<h3 id=\"时间\">时间</h3>\n<p>这个h5开发时间是在国庆前两天，通过比较短的时间完成开发、设计稿还原以及上线。在这记一下踩过的一些小坑或者说是小技巧。</p>\n<h3 id=\"使用框架\">使用框架</h3>\n<p>原本想直接了当用jQuery，毕竟用jQuery开发是真的快而且紧急情况可控。缺点是写起来会比较乱，维护也比较麻烦。但最后还是放弃，想尝试新的技术。最后试用了几套框架|库后，决定使用vux进行编写。</p>\n<!--more-->\n<h3 id=\"vux\">Vux</h3>\n<p><img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://user-images.githubusercontent.com/21136420/48887191-5af85100-ee69-11e8-84e9-fc534223e75b.png\" alt=\"tim 20181015093748\" ></p>\n<p>使用原因：  </p>\n<ol>\n<li>使用vue-cli构建，几乎不用配置其余东西，内建命令让开发和打包生产版十分便捷。</li>\n<li>vux有大量组件而且github上有非常多的issue记录，遇到问题可以快速定位解决。</li>\n<li>vue生态给力，写起来舒舒服服。</li>\n</ol>\n<h3 id=\"主要坑\">主要坑</h3>\n<p>由于第一次用vux写h5，难免会遇到不少问题，不仅是框架本身的问题，还有其他业务上需要攻克的问题。就记录下踩过的坑：</p>\n<ul>\n<li>background-image在部署的时候路径不对。</li>\n</ul>\n<p>修改vue-cli的build文件夹下的utils.js为如下：\n<img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://user-images.githubusercontent.com/21136420/48887225-7b281000-ee69-11e8-85a0-6e465667d9c4.png\" alt=\"util\" ></p>\n<p>这样在 CSS 中：background-image: url(&quot;./assets/bg.jpg&quot;)，不管是在开发环境下还是在生产环境下，背景图都可以读出来</p>\n<ul>\n<li>怎么生成图片并在微信端支持长按保存图片？  </li>\n</ul>\n<p>以前也做过类似的，但没做过微信支持长按保存图片的。首先当然是要用到将html转为canvas然后再考虑转为图片。</p>\n<ol>\n<li>库：<a target='_blank'  href=\"https://html2canvas.hertzen.com/documentation\">html2canvas</a></li>\n<li>用法非常简单，指定挂载的元素进行转化。</li>\n</ol>\n<pre><code class=\"language-javascript\">html2canvas(<span class=\"hljs-built_in\">document</span>.body).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">canvas</span>) =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(canvas);    <span class=\"hljs-comment\">// 这个是生成的canvas</span>\n    <span class=\"hljs-keyword\">const</span> base64Code = canvas.toDataURL(<span class=\"hljs-string\">\"image/png\"</span>);    <span class=\"hljs-comment\">//将生成的canvas通过api`toDataURL`转为base64格式图片。</span>\n});</code></pre>\n<ul>\n<li>怎么保存图片？</li>\n</ul>\n<p>不是已经生成图片了吗？生成就可以可以保存了。没错，但是业务问题，在生成的图片上还要包含可点击的按钮和一个超链接。可以想到，可以将按钮和超链接定位到生成的图片上。可是存在这样的问题，不同的移动端呈现的结果可能不一致，这会直接导致页面显示出现问题，进而影响使用体验。这种覆盖的想法最后放弃了。</p>\n<p>最后的做法：将生成的图片的透明度设置为0覆盖到原本要渲染的元素上，然后提高可点击按钮的层级。\n<img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://user-images.githubusercontent.com/21136420/48887259-95fa8480-ee69-11e8-8564-ddbccc8f1e26.png\" alt=\"tim 20181015100607\" ></p>\n<ul>\n<li>存在无法分享到朋友圈的问题</li>\n</ul>\n<p>微信浏览器唤起的分享菜单，存在点击分享到朋友圈出现卡死问题。\n排查过程： 在页面操作第一步和第二步都不会有这个问题，在生成图片的第三步就出现无法分享的问题。在想是不是生成图片太大了导致太卡顿了？在开发调试过程，打开vue开发工具查看第三步data的时候，发现非常卡顿。这样就可以认定是图片造成的卡顿了。</p>\n<p>最后找到的原因：canvas生成的base64编码的图片码十分长，直接导致vue处理的时候出现卡顿严重进而影响页面分享效果。最后的解决方案：将base64转为file上传，最后展示返回的url图片。</p>\n<pre><code class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> base64Code = canvas.toDataURL(<span class=\"hljs-string\">\"image/png\"</span>)\n  <span class=\"hljs-comment\">// 去掉url的头，并转换为byte。以下步骤生成JavaScript blob文件</span>\n  <span class=\"hljs-keyword\">const</span> bytes = <span class=\"hljs-built_in\">window</span>.atob(base64Code.split(<span class=\"hljs-string\">','</span>)[<span class=\"hljs-number\">1</span>])\n  <span class=\"hljs-keyword\">const</span> ab = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">ArrayBuffer</span>(bytes.length)\n  <span class=\"hljs-keyword\">const</span> ia = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>(ab)\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; bytes.length; i++) {\n    ia[i] = bytes.charCodeAt(i)\n  }\n  <span class=\"hljs-keyword\">let</span> files = self.blobToFile(<span class=\"hljs-keyword\">new</span> Blob([ab], { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'png'</span> }), <span class=\"hljs-string\">'post'</span>)\n  <span class=\"hljs-keyword\">let</span> formData = <span class=\"hljs-keyword\">new</span> FormData()\n  formData.append(<span class=\"hljs-string\">\"file\"</span>, files, <span class=\"hljs-string\">`myPost-<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime()}</span>.png`</span>);\n  self.$http.post(config.fileUploadURL, formData, {\n    <span class=\"hljs-attr\">headers</span>: {\n      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'multipart/form-data'</span>\n    }\n  }).then (<span class=\"hljs-function\"><span class=\"hljs-params\">uploadRes</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (uploadRes.data.code === <span class=\"hljs-number\">200</span>) {\n      self.imageBase = uploadRes.data.url\n    }\n  })</code></pre>\n<pre><code class=\"language-javascript\">  <span class=\"hljs-comment\">// blob图片转为文件的函数</span>\n  blobToFile (theBlob, fileName){\n    theBlob.lastModifiedDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n    theBlob.name = fileName;\n    <span class=\"hljs-keyword\">return</span> theBlob;\n  }</code></pre>\n<h3 id=\"成品\">成品</h3>\n<p>虽然国庆过了，但是还是贴出来哈哈。\n<a target='_blank'  href=\"http://xiaolu.ybj.com/wechat/html/gqyx/index.html\">活动</a></p>\n","fmData":{"attributes":{"title":"一次h5开发踩坑记录","description":"这个h5开发时间是在国庆前两天，通过比较短的时间完成开发、设计稿还原以及上线。在这记一下踩过的一些小坑或者说是小技巧。","keywords":"h5,踩坑,vue,vux","labels":["前端"],"date":"2018-10-15T00:00:00.000Z"},"body":"### 时间\n这个h5开发时间是在国庆前两天，通过比较短的时间完成开发、设计稿还原以及上线。在这记一下踩过的一些小坑或者说是小技巧。\n\n### 使用框架\n\n原本想直接了当用jQuery，毕竟用jQuery开发是真的快而且紧急情况可控。缺点是写起来会比较乱，维护也比较麻烦。但最后还是放弃，想尝试新的技术。最后试用了几套框架|库后，决定使用vux进行编写。\n<!--more-->\n### Vux\n![tim 20181015093748](https://user-images.githubusercontent.com/21136420/48887191-5af85100-ee69-11e8-84e9-fc534223e75b.png)\n\n使用原因：  \n\n1. 使用vue-cli构建，几乎不用配置其余东西，内建命令让开发和打包生产版十分便捷。\n2. vux有大量组件而且github上有非常多的issue记录，遇到问题可以快速定位解决。\n3. vue生态给力，写起来舒舒服服。\n\n### 主要坑\n\n由于第一次用vux写h5，难免会遇到不少问题，不仅是框架本身的问题，还有其他业务上需要攻克的问题。就记录下踩过的坑：\n\n- background-image在部署的时候路径不对。\n\n修改vue-cli的build文件夹下的utils.js为如下：\n![util](https://user-images.githubusercontent.com/21136420/48887225-7b281000-ee69-11e8-85a0-6e465667d9c4.png)\n\n这样在 CSS 中：background-image: url(\"./assets/bg.jpg\")，不管是在开发环境下还是在生产环境下，背景图都可以读出来\n\n- 怎么生成图片并在微信端支持长按保存图片？  \n\n以前也做过类似的，但没做过微信支持长按保存图片的。首先当然是要用到将html转为canvas然后再考虑转为图片。\n\n1. 库：[html2canvas](https://html2canvas.hertzen.com/documentation)\n2. 用法非常简单，指定挂载的元素进行转化。\n\n```javascript\nhtml2canvas(document.body).then((canvas) => {\n    console.log(canvas);    // 这个是生成的canvas\n    const base64Code = canvas.toDataURL(\"image/png\");    //将生成的canvas通过api`toDataURL`转为base64格式图片。\n});\n```\n\n- 怎么保存图片？\n\n不是已经生成图片了吗？生成就可以可以保存了。没错，但是业务问题，在生成的图片上还要包含可点击的按钮和一个超链接。可以想到，可以将按钮和超链接定位到生成的图片上。可是存在这样的问题，不同的移动端呈现的结果可能不一致，这会直接导致页面显示出现问题，进而影响使用体验。这种覆盖的想法最后放弃了。\n\n最后的做法：将生成的图片的透明度设置为0覆盖到原本要渲染的元素上，然后提高可点击按钮的层级。\n![tim 20181015100607](https://user-images.githubusercontent.com/21136420/48887259-95fa8480-ee69-11e8-8564-ddbccc8f1e26.png)\n\n- 存在无法分享到朋友圈的问题\n\n微信浏览器唤起的分享菜单，存在点击分享到朋友圈出现卡死问题。\n排查过程： 在页面操作第一步和第二步都不会有这个问题，在生成图片的第三步就出现无法分享的问题。在想是不是生成图片太大了导致太卡顿了？在开发调试过程，打开vue开发工具查看第三步data的时候，发现非常卡顿。这样就可以认定是图片造成的卡顿了。\n\n最后找到的原因：canvas生成的base64编码的图片码十分长，直接导致vue处理的时候出现卡顿严重进而影响页面分享效果。最后的解决方案：将base64转为file上传，最后展示返回的url图片。\n```javascript\n  const base64Code = canvas.toDataURL(\"image/png\")\n  // 去掉url的头，并转换为byte。以下步骤生成JavaScript blob文件\n  const bytes = window.atob(base64Code.split(',')[1])\n  const ab = new ArrayBuffer(bytes.length)\n  const ia = new Uint8Array(ab)\n  for (let i = 0; i < bytes.length; i++) {\n    ia[i] = bytes.charCodeAt(i)\n  }\n  let files = self.blobToFile(new Blob([ab], { type: 'png' }), 'post')\n  let formData = new FormData()\n  formData.append(\"file\", files, `myPost-${new Date().getTime()}.png`);\n  self.$http.post(config.fileUploadURL, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }).then (uploadRes => {\n    if (uploadRes.data.code === 200) {\n      self.imageBase = uploadRes.data.url\n    }\n  })\n```\n```javascript\n  // blob图片转为文件的函数\n  blobToFile (theBlob, fileName){\n    theBlob.lastModifiedDate = new Date();\n    theBlob.name = fileName;\n    return theBlob;\n  }\n```\n### 成品\n虽然国庆过了，但是还是贴出来哈哈。\n[活动](http://xiaolu.ybj.com/wechat/html/gqyx/index.html)","bodyBegin":9,"frontmatter":"title: 一次h5开发踩坑记录\ndescription: 这个h5开发时间是在国庆前两天，通过比较短的时间完成开发、设计稿还原以及上线。在这记一下踩过的一些小坑或者说是小技巧。\nkeywords: h5,踩坑,vue,vux\nlabels: ['前端']\ndate: 2018-10-15"}}