{"title":"用sapper构建一个博客","description":"用sapper构建一个博客，相关技术：svelte、sapper、tailwindcss、typescript。编写markdown后一键部署到github pages。","keywords":"sapper，博客，svelte，tailwindcss，typescript，github pages，markdown","labels":["前端","技术"],"date":"2020-06-20","path":"2020/06/build-blog.md","slug":"2020_06_build-blog","html":"<p>发现自己好久没有写博客了。之前在github开了一个仓库，在仓库的<a target='_blank'  href=\"https://github.com/GzhiYi/blog/issues\">issue区</a>写一些内容。issue区体验挺好的，可以refer上项目代码，也可以追加评论。但我想自己写一个博客，不需要很多花里胡哨的功能，只对内容专注，极大的好处是，可以随心所欲的编写自己喜欢的页面样式。刚好最近有接触了下<a target='_blank'  href=\"https://svelte.dev/\">svelte</a>，就顺带的用<a target='_blank'  href=\"https://sapper.svelte.dev/\">sapper</a>写一个静态页面。</p>\n<p>实现需要用到的知识点/技术：</p>\n<ol>\n<li>svelte</li>\n<li>sapper</li>\n<li>tailwindcss</li>\n<li>typescript</li>\n</ol>\n<p>后面两点非必须，可以根据自己需要进行增减。</p>\n<h2 id=\"思路\">思路</h2>\n<p>整体的思路比较简单。</p>\n<p>sapper支持export出静态文件，我只需要将静态文件部署到一个静态站点，首选的就是github pages。sapper导出export有一个好处：</p>\n<blockquote>\n<p>Static doesn&#39;t mean non-interactive — your Svelte components work exactly as they do normally, and you still get all the benefits of client-side routing and prefetching.</p>\n</blockquote>\n<p>sapper默认的template就是一个blog，这不是刚好可以拿来起手嘛！但默认的template的 blog内容是固定的数据，大致内容是一个js文件，export一个blog的array。</p>\n<pre><code class=\"language-javascript\">export const [\n  {\n    title: &#x27;<span class=\"hljs-number\">2020-06</span>/build-blog.md&#x27;,\n    slug: &#x27;<span class=\"hljs-number\">2020-06</span>_build-blog&#x27;, <span class=\"hljs-comment\">// 生成的路由路径</span>\n    html: &#x27;&lt;h1 id=\\&quot;用sapper构建一个博客\\&quot;&gt;用sapper构建一个博客&lt;/h1&gt;&#x27;\n  }\n]\n</code></pre>\n<p>在sapper export之后，可以在<code>__sapper__/export/blog</code>看到生成html静态文件。也就意味着最后需要部署到github pages的目录，就是<code>__sapper__</code>目录啦。</p>\n<p><strong>可如果要写博客，那肯定也优先选择Markdown。</strong></p>\n<p>所以需要解决的也就是将Markdown文件转为上面提到的js文件。</p>\n<h2 id=\"将markdown转为js文件\">将Markdown转为js文件</h2>\n<p>需要用到<a target='_blank'  href=\"https://github.com/markedjs/marked\">Markedjs</a>。</p>\n<p>使用也是简单粗暴：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> marked = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;marked&#x27;</span>)\nmarked.setOptions({\n  <span class=\"hljs-attr\">renderer</span>: <span class=\"hljs-keyword\">new</span> marked.Renderer(),\n  <span class=\"hljs-attr\">highlight</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">code, language</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> hljs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;highlight.js&#x27;</span>)\n    <span class=\"hljs-keyword\">const</span> validLanguage = hljs.getLanguage(language) ? language : <span class=\"hljs-string\">&#x27;plaintext&#x27;</span>\n    <span class=\"hljs-keyword\">return</span> hljs.highlight(validLanguage, code).value\n  },\n  <span class=\"hljs-comment\">// ...(more options)</span>\n});\nmarked(markdownString)\n</code></pre>\n<p>例如markdownString为：</p>\n<pre><code><span class=\"hljs-strong\">*hello world*</span>\n</code></pre>\n<p>将会被转为：</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">em</span>&gt;</span>hello world<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">em</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</code></pre>\n<p>知道用法之后，只需要通过fs文件操作，将目标的Markdown文件全部push进一个数组，最后将数组写入一个js文件。</p>\n<h2 id=\"读取markdown并写入文件\">读取Markdown并写入文件</h2>\n<p>node对操作文件提供了<code>readir</code>、<code>readFile</code>、<code>writeFile</code>等函数。</p>\n<p>其中核心的处理逻辑如下：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// 获取所有文件</span>\n<span class=\"hljs-keyword\">const</span> getAllFiles = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">dirPath, arrayOfFiles</span>) </span>{\n    files = fs.readdirSync(dirPath)\n    arrayOfFiles = arrayOfFiles || []\n    files.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">file</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (fs.statSync(dirPath + <span class=\"hljs-string\">&quot;/&quot;</span> + file).isDirectory()) {\n            arrayOfFiles = getAllFiles(dirPath + <span class=\"hljs-string\">&quot;/&quot;</span> + file, arrayOfFiles)\n        } <span class=\"hljs-keyword\">else</span> {\n            arrayOfFiles.push(path.join(dirPath, <span class=\"hljs-string\">&quot;/&quot;</span>, file))\n        }\n    })\n    <span class=\"hljs-keyword\">return</span> arrayOfFiles\n}\n<span class=\"hljs-comment\">// 将markdown转为js文件</span>\n<span class=\"hljs-keyword\">const</span> compile = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">const</span> dirs = getAllFiles(<span class=\"hljs-string\">&#x27;./&#x27;</span>) <span class=\"hljs-comment\">// 读取所有文件</span>\n        <span class=\"hljs-keyword\">const</span> inPosts = [] <span class=\"hljs-comment\">// 文章数组</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> fileName <span class=\"hljs-keyword\">of</span> dirs) {\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-regexp\">/.md/</span>.test(fileName)) {\n                <span class=\"hljs-keyword\">const</span> fileData = fs.readFileSync(<span class=\"hljs-string\">`./<span class=\"hljs-subst\">${fileName}</span>`</span>, <span class=\"hljs-string\">&#x27;utf-8&#x27;</span>) <span class=\"hljs-comment\">// markdown内容</span>\n                <span class=\"hljs-keyword\">const</span> fmData = fm(fileData) <span class=\"hljs-comment\">// 此处可以忽略fm（fm是处理markdown front matter的，可有可无）</span>\n                <span class=\"hljs-keyword\">const</span> rmSuffix = fileName.split(<span class=\"hljs-string\">&#x27;.&#x27;</span>)[<span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\">// 移除文件名后缀</span>\n                inPosts.push({\n                    <span class=\"hljs-attr\">title</span>: fileName,\n                    <span class=\"hljs-attr\">path</span>: rmSuffix,\n                    <span class=\"hljs-attr\">slug</span>: rmSuffix.replace(<span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-string\">&#x27;_&#x27;</span>),\n                    <span class=\"hljs-attr\">html</span>: marked(fmData.body),\n                    fmData\n                })\n            }\n        }\n        inPosts.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">post</span> =&gt;</span> {\n            post.html = post.html.replace(<span class=\"hljs-regexp\">/^\\t{3}/gm</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>);\n        });\n        <span class=\"hljs-keyword\">const</span> outPutContent = <span class=\"hljs-string\">`export default <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">JSON</span>.stringify(inPosts)}</span>`</span>\n        fs.writeFile(<span class=\"hljs-string\">&#x27;../routes/blog/_posts.js&#x27;</span>, outPutContent, <span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> {\n            <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;生成post失败&#x27;</span>, err)\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;已生成_posts.js&#x27;</span>)\n        })\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n        <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">&#x27;error&#x27;</span>, error)\n    }\n}\n<span class=\"hljs-keyword\">const</span> watcher = chokidar.watch(<span class=\"hljs-string\">&#x27;./&#x27;</span>)\nwatcher\n    .on(<span class=\"hljs-string\">&#x27;all&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n        compile()\n    })\n</code></pre>\n<h2 id=\"部署到github-pages\">部署到github pages</h2>\n<p>对于sapper，执行export命令生成静态文件。</p>\n<pre><code class=\"language-bash\">npm run <span class=\"hljs-keyword\">export</span>\n</code></pre>\n<p>将<code>__sapper__/export</code>推送到仓库的gh-pages分支。</p>\n<pre><code class=\"language-bash\">git subtree <span class=\"hljs-built_in\">push</span> --<span class=\"hljs-built_in\">prefix</span> __sapper__/export <span class=\"hljs-built_in\">origin</span> gh-pages\n</code></pre>\n<p>最后在仓库设置出将gh-pages分支设置为部署分支就好了。</p>\n<p>以上完成了从写Markdown到可以看到文章，后续页面的编写就可以随心所欲啦！</p>\n"}