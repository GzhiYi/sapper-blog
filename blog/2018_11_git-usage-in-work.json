{"title":"git在工作中的一些用处","description":"git内容有非常多，如果要每个命令都去熟悉和记忆的话，我觉得是没有必要的，掌握基本的用法，在团队合作中能快速定位问题和解决才是重要的。","keywords":"git,工作中,用处,git工作流,分支,git rebase,git merge","labels":["学习"],"date":"2018-11-28","path":"2018/11/git-usage-in-work.md","slug":"2018_11_git-usage-in-work","html":"<p><img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://images.vrm.cn/2018/11/26/banner.png\" alt=\"banner\" ></p>\n<p>本周四分享会主题：__git在工作中的一些用处__。  </p>\n<p>git内容有非常多，如果要每个命令都去熟悉和记忆的话，我觉得是没有必要的，掌握基本的用法，在团队合作中能快速定位问题和解决才是重要的。<strong>基本的概念不会多说</strong>，都能在入门教程那些学习到。接下来会说下git在工作中比较常用的功能，会发现，其实git能做的事情还是非常多的。</p>\n<h3 id=\"git在开发中常用的命令\">git在开发中常用的命令</h3>\n<p><strong>编辑和代码提交</strong></p>\n<pre><code class=\"language-bash\"><span class=\"hljs-meta\"># 为git初始化一个代码库</span>\ngit init\n\n<span class=\"hljs-meta\"># 将目录的所有文件提交到暂存区</span>\ngit add .\n\n<span class=\"hljs-meta\"># 提交暂存区到代码仓库区，并添加提交信息</span>\ngit commit -m <span class=\"hljs-string\">&quot;commit message&quot;</span>\n</code></pre>\n<p><strong>分支处理</strong></p>\n<pre><code class=\"language-bash\">\n<span class=\"hljs-comment\"># 列出本地所有的分支</span>\ngit <span class=\"hljs-keyword\">branch\n</span>\n<span class=\"hljs-comment\"># 列出远程仓库的所有分支</span>\ngit <span class=\"hljs-keyword\">branch </span>-r\n\n<span class=\"hljs-comment\"># 列出仓库的所有分支（包含远端和本地分支）</span>\ngit <span class=\"hljs-keyword\">branch </span>-a\n\n<span class=\"hljs-comment\"># 切换到指定分支，并更新工作区</span>\ngit checkout [<span class=\"hljs-keyword\">branchName]\n</span>\n<span class=\"hljs-comment\"># 新建一个分支并切换到该分支</span>\ngit checkout -<span class=\"hljs-keyword\">b </span>[<span class=\"hljs-keyword\">branchName]\n</span>\n<span class=\"hljs-comment\"># 删除一个分支</span>\ngit <span class=\"hljs-keyword\">branch </span>-d [<span class=\"hljs-keyword\">branchName]\n</span>\n<span class=\"hljs-comment\"># 强制删除一个分支</span>\ngit <span class=\"hljs-keyword\">branch </span>-D [<span class=\"hljs-keyword\">branchName]</span>\n</code></pre>\n<p><strong>查看状态信息</strong></p>\n<pre><code class=\"language-bash\"><span class=\"hljs-meta\"># 查看变更的文件，可多用这个命令查看当前文件改动状态</span>\ngit status\n\n<span class=\"hljs-meta\"># 查看当前分支提交历史，可以得到加密的commit_id</span>\ngit log\n\n<span class=\"hljs-meta\"># 查看暂存区和工作区的对比</span>\ngit diff\n</code></pre>\n<p><strong>同步远程仓库</strong></p>\n<pre><code class=\"language-bash\"><span class=\"hljs-meta\"># 同步远程仓库的所有更新</span>\ngit fetch [remote]\n\n<span class=\"hljs-meta\"># 显示所有远程仓库</span>\ngit remote -v\n\n<span class=\"hljs-meta\"># 增加一个新的远程仓库，并定义一个远程仓库名，shortName常用origin，当然可自定义</span>\ngit remote add [shortName] url\n\n<span class=\"hljs-meta\"># 拉取远端分支，并与本地分支合并</span>\ngit pull [remote] [branchName]\n\n<span class=\"hljs-meta\"># 上传本地分支到远端</span>\ngit push [remote] [branchName]\n</code></pre>\n<p><strong>撤销操作</strong></p>\n<pre><code class=\"language-bash\"><span class=\"hljs-meta\"># 恢复暂存区的指定文件到工作区</span>\ngit checkout [file]\n\n<span class=\"hljs-meta\"># 恢复暂存区的所有文件到工作区</span>\ngit checkout .\n</code></pre>\n<p><img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://user-images.githubusercontent.com/21136420/49006081-37a00f80-f1a3-11e8-982e-c02cd71c1495.png\" alt=\"image\" ></p>\n<p>git工作中常用命令基本可以上图概括。</p>\n<hr>\n<p><strong>其它常用的命令</strong>\n单独拿出来说是因为平常知道用的可能不会很多，但实际用起来会非常有用。</p>\n<ol>\n<li><code>git stash</code></li>\n</ol>\n<p>当你在工作的时候，累计了比较多的改动，但是突然间需要临时切换到其它分支工作，可是又不好把中途工作的内容提交，那怎么办？这时候git stash就有用了。</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-meta\"># 查看文件变更状态</span>\ngit status\n\n<span class=\"hljs-meta\"># 储藏变更，这时候会提示已储藏变更</span>\ngit stash\n\n<span class=\"hljs-meta\"># 当在其它分支工作完回到原来分支的时候，可以查看储藏列表</span>\ngit stash list\n\n<span class=\"hljs-meta\"># 恢复储藏，这时候文件变更就回来了，listNum为列表序号</span>\ngit stash apply stash@{listNum}\n</code></pre>\n<ol start=\"2\">\n<li><code>git rebase</code></li>\n</ol>\n<p>一般我们完成代码后，需要将分支的改动进行整合，会用到合并（merge）操作，但这不是唯一的方式，Rebase就是其中的代替方式。<br>先来说说merge。我们在需要合并的时候，会有如下的两种基本情况： </p>\n<p><img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://images.vrm.cn/2018/11/27/starting-situation-fast-forward.gif\" alt=\"情况1\" >\n其中一个分支没有新的改动，而另一个分支却有改动。这个时候进行整合的话，git仅仅只是添加所有改动的分支的新提交即可。</p>\n<p><img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://images.vrm.cn/2018/11/27/starting-situation-merge-commit.gif\" alt=\"情况2\" >\n第二种就是我们开发过程经常遇到的情况，两个分支都有不同的开发轨迹。为了完成合并，git会创建一个新的提交来涵括它们之间的差异，这就是整合提交。</p>\n<p>有人不喜欢这个合并的方式，希望项目有一个单一的开发轨迹，在流程上是一条直线，不希望在开发历史记录上看到被分成过多个分支。这时候就可以用到rebase操作了。</p>\n<p>我们还是看第一个例子：</p>\n<p><img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://images.vrm.cn/2018/11/27/starting-situation-fast-forward.gif\" alt=\"情况1\" >\n如果我们想合并分支B到A分支上，可以用到下面这个命令：</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-attribute\">git rebase branchB</span>\n</code></pre>\n<p>git会进行这样的操作：<br>“撤销”所有分支A上与分支B开发分叉后的更改，这并不是真的checkout掉更改，后面还会用到。\n<img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://images.vrm.cn/2018/11/27/rebase-step-1.gif\" alt=\"rebase1\" ></p>\n<p>然后它将整合分支B上的提交到A上，这要看，分支A和分支B就会像一条线一样。\n<img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://images.vrm.cn/2018/11/27/rebase-step-2.gif\" alt=\"rebase2\" ></p>\n<p>最后，在分支A上的那些新的提交会被重新应用回来。\n<img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://images.vrm.cn/2018/11/27/rebase-step-3.gif\" alt=\"rebase3\" ></p>\n<ol start=\"3\">\n<li><code>git reset</code>和<code>git revert</code></li>\n</ol>\n<p>开发期间难免会有提交出错代码的情况，如何进行版本回退呢？git reset命令就派上用场了.  </p>\n<ul>\n<li>git reset 为重置提交，可以将版本回退到某一个commit记录上。git reset 命令后面是需要加2种参数的：–-hard 和 –-soft。这条命令默认情况下是 -–soft。<br><strong>区别：</strong></li>\n</ul>\n<p>默认参数 -soft,所有commit的修改都会退回到git暂存区。\n参数--hard，所有commit的修改直接丢弃，小心用。</p>\n<pre><code class=\"language-bash\">git <span class=\"hljs-built_in\">reset</span> --hard commit_id\ngit <span class=\"hljs-built_in\">push</span> <span class=\"hljs-built_in\">origin</span> [branchName] --force\n</code></pre>\n<p>当然如果--hard错了，也还有救，<code>git reflog</code>命令记录你的所有git操作，能获取到原有的移除掉的commit_id。</p>\n<ul>\n<li>git revert 为还原提交，可以将某个commit还原然后创建一个新的还原commit。字面意思已经很好理解了。比如：</li>\n</ul>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># 某个commit的文件a增加两行文字</span>\n\n<span class=\"hljs-attribute\">git</span> revert commit_id\n\n<span class=\"hljs-comment\"># 执行该命令后，还原了这个commit文件a的更改，新增一个revert的commit，更改为增加的两行文字被移除。</span>\n</code></pre>\n<h3 id=\"git工作流\">git工作流</h3>\n<p>这里只说下最广泛应用的git工作流，也就是git flow。<br>在开发的初期，我们定两个分支：</p>\n<ul>\n<li><strong>主分支master</strong></li>\n<li><strong>开发分支develop</strong></li>\n</ul>\n<p>规定，master分支为版本发布的分支，提供上线的版本。develop分支为日常开发分支，存放最新的开发版本。一般的develop分支会切出如下的三个短期分支：</p>\n<ol>\n<li>功能分支（feature）</li>\n<li>修bug分支（hotfix或者fix）</li>\n<li>预发布分支（release）</li>\n</ol>\n<p><strong>还有其它工作流？</strong></p>\n<p>当然有！下面就继续说一个挺不错的工作流：  </p>\n<blockquote>\n<p>功能分支工作流  </p>\n</blockquote>\n<p>这个工作流的核心思路是所有的功能开发都应该独立一个分支，而主分支一样是master。这样的隔离开发不会扰乱主分支上的代码，也能保证主分支的代码准确无误。</p>\n<p>这种方式让pull request变得更加有效果。过多的就不解释，通过一个例子看看这个工作流到底是如何工作的。</p>\n<p><strong>小红开始开发一个新功能</strong><br>理所当然，从master切出一个独立功能分支：</p>\n<pre><code class=\"language-bash\">git checkout -b <span class=\"hljs-built_in\">feature</span>-<span class=\"hljs-built_in\">new</span> master\n</code></pre>\n<p>持续打码，中途完成部分:</p>\n<pre><code class=\"language-bash\">git status\ngit <span class=\"hljs-built_in\">add</span> [<span class=\"hljs-built_in\">file</span>]\ngit commit -m <span class=\"hljs-string\">&#x27;xxx&#x27;</span>\n</code></pre>\n<p><strong>中午去吃个饭</strong><br>在吃午饭前，小红把自己的功能分支推到了远端仓库。好习惯，多学习。</p>\n<pre><code class=\"language-bash\">git <span class=\"hljs-built_in\">push</span> <span class=\"hljs-built_in\">origin</span> <span class=\"hljs-built_in\">feature</span>-<span class=\"hljs-built_in\">new</span>\n</code></pre>\n<p><strong>小红完成开发</strong>\n在合并之前，小红保证远端仓库有自己功能分支的最新代码。</p>\n<pre><code class=\"language-bash\">git <span class=\"hljs-built_in\">push</span> <span class=\"hljs-built_in\">origin</span> <span class=\"hljs-built_in\">feature</span>-<span class=\"hljs-built_in\">new</span>\n</code></pre>\n<p>接下来，可以发起一个合并请求，在github或者gitlab都有快捷的合并请求操作。合并功能分支feature-new到master。发起后，团队都可以收到合并请求的通知。</p>\n<p>这时候团队可以code review，有问题就可以继续提示小红去修正。</p>\n<p>修正后小红可以持续推代码到功能分支，commit记录也会一并出现在pull request处。</p>\n<p><strong>小红发布功能</strong><br>经过紧张的讨论修改，终于完成功能开发，要发布功能：</p>\n<pre><code class=\"language-bash\">git checkout master\ngit pull\ngit pull <span class=\"hljs-built_in\">origin</span> <span class=\"hljs-built_in\">feature</span>-<span class=\"hljs-built_in\">new</span>\ngit <span class=\"hljs-built_in\">push</span>\n</code></pre>\n<p>完毕。</p>\n<h3 id=\"还能怎么发挥git作用？\">还能怎么发挥git作用？</h3>\n<p><strong>webhooks</strong></p>\n<p>根据github的介绍，webhooks可以通过使用github的事件被触发时通过http post的形式调用服务器上的接口，服务器接受到推送事件之后就可以执行构建，更新项目代码，进而部署生产服务器等等。</p>\n<blockquote>\n<p>这一切能限制的只有你的想象力。</p>\n</blockquote>\n<p>一般而言，比如说我部署一个node程序到服务器上需要怎么操作？</p>\n<ol>\n<li><p>本地代码开发完毕，准备上线，上传本地代码到git远端仓库。</p>\n</li>\n<li><p>ssh连接远程服务器，登录管理员账号密码后进入命令行界面。</p>\n</li>\n<li><p>进入项目目录，拉取最新提交的代码。</p>\n</li>\n<li><p>执行部署操作。</p>\n</li>\n<li><p>需要代码更新，重复此操作。</p>\n</li>\n</ol>\n<p><strong>而我通过webhooks之后，这些操作得到很大的简化。</strong></p>\n<ol>\n<li>配置webhooks的push事件，因为我要在本地push代码后执行后续操作。</li>\n</ol>\n<p><img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://user-images.githubusercontent.com/21136420/49086433-78755280-f28f-11e8-98ee-a1279e427c8e.png\" alt=\"image\" ></p>\n<ol start=\"2\">\n<li>在服务器上编写一个自动部署脚本，这里举个简单的脚本<code>deploy.sh</code>。</li>\n</ol>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\">#！/bin/bash</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&#x27;enter project&#x27;</span>\n<span class=\"hljs-built_in\">cd</span> [your project dir]\n\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&#x27;pull code&#x27;</span>\ngit pull origin master\n\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&#x27;deploy&#x27;</span>\npm2 start deploy.js\npm2 logs deploy\n\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&#x27;deploy finished&#x27;</span>\n</code></pre>\n<ol start=\"3\">\n<li>用node写一个监听接口，不一定要node，只要能跑出个接口能监听到事件即可。需要提到：</li>\n</ol>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> createHandler = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;node-github-webhook&#x27;</span>)\n<span class=\"hljs-keyword\">const</span> config = {\n  <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/hook&#x27;</span>,\n  <span class=\"hljs-attr\">secret</span>: <span class=\"hljs-string\">&#x27;your srcret&#x27;</span>\n}\n<span class=\"hljs-keyword\">const</span> handler = createHandler(config)\n...\n\nhandler.on(<span class=\"hljs-string\">&#x27;push&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>{\n  execFunc(<span class=\"hljs-string\">&#x27;sh ./deploy.sh&#x27;</span>)\n})\n</code></pre>\n<p>这里的path和secret都需要在github webhooks那边对应配置上。</p>\n<ol start=\"4\">\n<li>完成之后，一旦代码提交到master的话，就会触发事件，然后自动执行后续操作。</li>\n</ol>\n<h3 id=\"git工具推荐\">git工具推荐</h3>\n<p>有几个个人认为不错的git工具或者项目可以提高git的使用。</p>\n<ol>\n<li><a target='_blank'  href=\"https://github.com/github/gitignore\">gitignore</a>。在项目根目录新建一个<code>.gitignore</code>文件，将不需要提交到git上的文件路径添加到这个文件。在这个项目中可以快速找到自己所属项目的通用gitignore文件</li>\n</ol>\n<p><img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://images.vrm.cn/2018/11/27/微信截图_20181127222540.png\" alt=\"gitignore\" ></p>\n<ol start=\"2\">\n<li>[<code>VS Code</code>] gitignore。可以右键将文件夹或者文件添加到.gitignore文件中。</li>\n</ol>\n<p><img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://images.vrm.cn/2018/11/27/微信截图_20181127222733.png\" alt=\"gitignore\" ></p>\n<ol start=\"3\">\n<li>[<code>VS Code</code>] GitLens。可以让每一行代码都显示历史记录等。</li>\n</ol>\n<p><img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://images.vrm.cn/2018/11/27/微信截图_20181127223043.png\" alt=\"Gitlens\" ></p>\n<ol start=\"4\">\n<li>[<code>Chrome</code>] octotree。浏览github上的代码更加轻松便捷。</li>\n</ol>\n<p><img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://images.vrm.cn/2018/11/27/微信截图_20181127223252.png\" alt=\"octotree\" ></p>\n<ol start=\"5\">\n<li>Sourcetree。git图形界面工具，讲了那么多命令应该可以不用图形界面了吧😀。\n<img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://images.vrm.cn/2018/11/28/微信截图_20181128215137.png\" alt=\"sourcetree\" ></li>\n</ol>\n<h3 id=\"最后\">最后</h3>\n<p>分享内容大概如此了，欢迎补充，也希望内容有些帮助。😄</p>\n<blockquote>\n<p>参考\n<a target='_blank'  href=\"https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/rebase\">Rebase 代替合并 </a>\n<a target='_blank'  href=\"http://www.ruanyifeng.com/blog/2015/12/git-workflow.html\">git 工作流-阮老师的</a>\n<a target='_blank'  href=\"https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md\">git 工作流</a></p>\n</blockquote>\n"}