{"title":"2020-06/sapper-github-actions.md","path":"2020-06/sapper-github-actions","slug":"2020-06_sapper-github-actions","html":"<p>之前构建好了的<a href=\"/blog/2020-06_build-blog\">博客</a>，通过编写一个脚本实现本地自动化部署。脚本实现的功能就是在本地处理项目的打包并将静态文件推送到远端的<code>gh-pages</code>分支以实现静态文件部署。在了解github actions之后，决定增加一个自动化打包部署的workflow。这样就可以将编译打包的操作完全放置在”云端“。</p>\n<h2 id=\"编写workflow配置文件\">编写workflow配置文件</h2>\n<p>在项目根目录创建<code>.github/workflows/main.yml</code></p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span> <span class=\"hljs-string\">GitHub</span> <span class=\"hljs-string\">Pages</span>\n\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">push:</span>\n      <span class=\"hljs-comment\"># push钩子监听的分支，为编译打包的分支</span>\n    <span class=\"hljs-attr\">branches:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">feat/dev</span>\n\n<span class=\"hljs-comment\"># 任务</span>\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">build-and-deploy:</span>\n    <span class=\"hljs-comment\"># 服务器环境：最新版 Ubuntu</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-comment\"># 拉取代码</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">persist-credentials:</span> <span class=\"hljs-literal\">false</span>\n\n      <span class=\"hljs-comment\"># 生成静态文件</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Build</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span> <span class=\"hljs-string\">&amp;&amp;</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">export</span> <span class=\"hljs-string\">&amp;&amp;</span> <span class=\"hljs-string\">cp</span> <span class=\"hljs-string\">-i</span> <span class=\"hljs-string\">CNAME</span> <span class=\"hljs-string\">__sapper__/export</span>\n\n      <span class=\"hljs-comment\"># 部署到 GitHub Pages</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">JamesIves/github-pages-deploy-action@releases/v3</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">ACCESS_TOKEN:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">secrets.GH_PAGES</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">BRANCH:</span> <span class=\"hljs-string\">gh-pages</span>\n          <span class=\"hljs-attr\">FOLDER:</span> <span class=\"hljs-string\">__sapper__/export</span></code></pre>\n<p>上面配置有个别要注意的点：</p>\n<ol>\n<li><p>branches需要设置为要处理的分支。</p>\n</li>\n<li><p>with/ACCESS_TOKEN为github生成的token。</p>\n<p>生成步骤：</p>\n<p><a href=\"https://github.com/settings/tokens\">github右上角的Settings-Developer settings-Personal access tokens</a> 点击<code>Generate new token</code>，为了和配置文件对应，token的note需要填写为GH_PAGES，然后勾选scope为repo。</p>\n<p>在博客的仓库的setting设置secret。</p>\n<p><img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://i.loli.net/2020/06/22/jurxoLcUY7p5C8a.jpg\" alt=\"Xnip2020-06-22_14-12-10.jpg\" ></p>\n</li>\n<li><p>with/FOLDER为sapper导出export的静态文件目录。</p>\n</li>\n</ol>\n<p>以上完成之后，将代码push到远端仓库，就可以在Actions看到名字为<code>Deploy Github Pages</code>的workflow。</p>\n<p><img align=\"center\" style=\"width: 100%;\" data-zoomable src=\"https://i.loli.net/2020/06/22/bCxitLWKVlgHD8P.jpg\" alt=\"Xnip2020-06-22_14-15-32.jpg\" ></p>\n<h2 id=\"体会\">体会</h2>\n<p>Github Actions比在公司使用gitlab cicd快了不少，体验非常不错。在写完博客之后，只需要做的，只有将更新的内容push到github就可以了。</p>\n","fmData":{"attributes":{"title":"使用github actions自动编译部署sapper-blog","description":"使用github actions打包部署sapper项目并部署到github pages。","keywords":"github actions,sapper,github pages","labels":["前端"],"date":"2020-06-22T00:00:00.000Z"},"body":"之前构建好了的[博客](/blog/2020-06_build-blog)，通过编写一个脚本实现本地自动化部署。脚本实现的功能就是在本地处理项目的打包并将静态文件推送到远端的`gh-pages`分支以实现静态文件部署。在了解github actions之后，决定增加一个自动化打包部署的workflow。这样就可以将编译打包的操作完全放置在”云端“。\n\n## 编写workflow配置文件\n\n在项目根目录创建`.github/workflows/main.yml`\n\n```yaml\nname: Deploy GitHub Pages\n\non:\n  push:\n  \t# push钩子监听的分支，为编译打包的分支\n    branches:\n      - feat/dev\n\n# 任务\njobs:\n  build-and-deploy:\n    # 服务器环境：最新版 Ubuntu\n    runs-on: ubuntu-latest\n    steps:\n      # 拉取代码\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          persist-credentials: false\n\n      # 生成静态文件\n      - name: Build\n        run: npm install && npm run export && cp -i CNAME __sapper__/export\n\n      # 部署到 GitHub Pages\n      - name: Deploy\n        uses: JamesIves/github-pages-deploy-action@releases/v3\n        with:\n          ACCESS_TOKEN: ${{ secrets.GH_PAGES }}\n          BRANCH: gh-pages\n          FOLDER: __sapper__/export\n```\n\n上面配置有个别要注意的点：\n\n1. branches需要设置为要处理的分支。\n\n2. with/ACCESS_TOKEN为github生成的token。\n\n   生成步骤：\n\n   [github右上角的Settings-Developer settings-Personal access tokens](https://github.com/settings/tokens) 点击`Generate new token`，为了和配置文件对应，token的note需要填写为GH_PAGES，然后勾选scope为repo。\n\n   在博客的仓库的setting设置secret。\n\n   ![Xnip2020-06-22_14-12-10.jpg](https://i.loli.net/2020/06/22/jurxoLcUY7p5C8a.jpg)\n\n3. with/FOLDER为sapper导出export的静态文件目录。\n\n以上完成之后，将代码push到远端仓库，就可以在Actions看到名字为`Deploy Github Pages`的workflow。\n\n![Xnip2020-06-22_14-15-32.jpg](https://i.loli.net/2020/06/22/bCxitLWKVlgHD8P.jpg)\n\n## 体会\n\nGithub Actions比在公司使用gitlab cicd快了不少，体验非常不错。在写完博客之后，只需要做的，只有将更新的内容push到github就可以了。\n\n","bodyBegin":9,"frontmatter":"title: 使用github actions自动编译部署sapper-blog\ndescription: 使用github actions打包部署sapper项目并部署到github pages。\nkeywords: github actions,sapper,github pages\nlabels: ['前端']\ndate: 2020-06-22"}}